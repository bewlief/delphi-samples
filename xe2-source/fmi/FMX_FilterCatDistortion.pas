{*******************************************************}
{                                                       }
{              Delphi FireMonkey Platform               }
{                                                       }
{ Copyright(c) 2011 Embarcadero Technologies, Inc.      }
{                                                       }
{*******************************************************}

unit FMX_FilterCatDistortion;

interface

{$I FMX_Defines.inc}

uses
  FMX_Filter;

type

  TRippleFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TBandsFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TPinchFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TSwirlFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TBandedSwirlFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TWaveFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TMagnifyFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TWrapFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TSmoothMagnifyFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

implementation

{ TRippleFilter }

constructor TRippleFilter.Create;
const
  DX9PS2BIN: array [0..903] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $4F, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $13, $01, $00, $00, $00, $02, $FF, $FF, $06, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $0C, $01, $00, $00,
    $94, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $A0, $00, $00, $00, $00, $00, $00, $00, $B0, $00, $00, $00, $02, $00, $04, $00, $01, $00, $12, $00, $A0, $00, $00, $00, $00, $00, $00, $00,
    $BC, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $C4, $00, $00, $00, $00, $00, $00, $00, $D4, $00, $00, $00, $02, $00, $02, $00, $01, $00, $0A, $00, $A0, $00, $00, $00, $00, $00, $00, $00,
    $DE, $00, $00, $00, $02, $00, $03, $00, $01, $00, $0E, $00, $A0, $00, $00, $00, $00, $00, $00, $00, $E4, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $FC, $00, $00, $00, $00, $00, $00, $00,
    $41, $6D, $70, $6C, $69, $74, $75, $64, $65, $00, $AB, $AB, $00, $00, $03, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $41, $73, $70, $65, $63, $74, $52, $61, $74, $69, $6F, $00,
    $43, $65, $6E, $74, $65, $72, $00, $AB, $01, $00, $03, $00, $01, $00, $02, $00, $01, $00, $00, $00, $00, $00, $00, $00, $46, $72, $65, $71, $75, $65, $6E, $63, $79, $00, $50, $68, $61, $73, $65, $00,
    $69, $6D, $70, $6C, $69, $63, $69, $74, $49, $6E, $70, $75, $74, $53, $61, $6D, $70, $6C, $65, $72, $00, $AB, $AB, $AB, $04, $00, $0C, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00,
    $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29, $20, $44, $33, $44, $58, $39, $20, $53, $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C,
    $65, $72, $20, $00, $51, $00, $00, $05, $05, $00, $0F, $A0, $00, $00, $00, $00, $83, $F9, $22, $3E, $00, $00, $00, $3F, $00, $00, $80, $3F, $51, $00, $00, $05, $06, $00, $0F, $A0, $DB, $0F, $C9, $40,
    $DB, $0F, $49, $C0, $CD, $CC, $4C, $3E, $00, $00, $00, $00, $51, $00, $00, $05, $07, $00, $0F, $A0, $01, $0D, $D0, $B5, $61, $0B, $B6, $B7, $AB, $AA, $2A, $3B, $89, $88, $88, $39, $51, $00, $00, $05,
    $08, $00, $0F, $A0, $AB, $AA, $AA, $BC, $00, $00, $00, $BE, $00, $00, $80, $3F, $00, $00, $00, $3F, $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90,
    $00, $08, $0F, $A0, $06, $00, $00, $02, $00, $00, $08, $80, $04, $00, $00, $A0, $02, $00, $00, $03, $00, $00, $03, $80, $00, $00, $E4, $B0, $00, $00, $E4, $A1, $05, $00, $00, $03, $00, $00, $02, $80,
    $00, $00, $FF, $80, $00, $00, $55, $80, $5A, $00, $00, $04, $00, $00, $04, $80, $00, $00, $E4, $80, $00, $00, $E4, $80, $05, $00, $00, $A0, $07, $00, $00, $02, $00, $00, $04, $80, $00, $00, $AA, $80,
    $05, $00, $00, $03, $01, $00, $03, $80, $00, $00, $E4, $80, $00, $00, $AA, $80, $06, $00, $00, $02, $01, $00, $08, $80, $00, $00, $AA, $80, $05, $00, $00, $03, $01, $00, $04, $80, $01, $00, $55, $80,
    $04, $00, $00, $A0, $01, $00, $00, $02, $00, $00, $01, $80, $02, $00, $00, $A0, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $00, $80, $01, $00, $FF, $80, $03, $00, $00, $A0, $04, $00, $00, $04,
    $00, $00, $01, $80, $00, $00, $00, $80, $05, $00, $55, $A0, $05, $00, $AA, $A0, $13, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $00, $80,
    $06, $00, $00, $A0, $06, $00, $55, $A0, $25, $00, $00, $04, $02, $00, $03, $80, $00, $00, $00, $80, $07, $00, $E4, $A0, $08, $00, $E4, $A0, $05, $00, $00, $03, $00, $00, $01, $80, $02, $00, $55, $80,
    $01, $00, $00, $A0, $02, $00, $00, $03, $00, $00, $12, $80, $01, $00, $FF, $81, $05, $00, $FF, $A0, $05, $00, $00, $03, $00, $00, $02, $80, $00, $00, $55, $80, $00, $00, $55, $80, $04, $00, $00, $04,
    $00, $00, $01, $80, $00, $00, $00, $80, $00, $00, $55, $80, $01, $00, $FF, $80, $05, $00, $00, $03, $00, $00, $12, $80, $02, $00, $00, $80, $00, $00, $55, $80, $04, $00, $00, $04, $01, $00, $01, $80,
    $00, $00, $00, $80, $01, $00, $00, $80, $00, $00, $00, $A0, $04, $00, $00, $04, $01, $00, $02, $80, $00, $00, $00, $80, $01, $00, $AA, $80, $00, $00, $55, $A0, $42, $00, $00, $03, $01, $00, $0F, $80,
    $01, $00, $E4, $80, $00, $08, $E4, $A0, $02, $00, $00, $03, $00, $00, $01, $80, $00, $00, $55, $81, $05, $00, $FF, $A0, $01, $00, $00, $02, $00, $00, $04, $80, $06, $00, $AA, $A0, $05, $00, $00, $03,
    $00, $00, $02, $80, $00, $00, $AA, $80, $01, $00, $00, $A0, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $55, $80, $00, $00, $00, $81, $05, $00, $FF, $A0, $05, $00, $00, $03, $01, $00, $07, $80,
    $01, $00, $E4, $80, $00, $00, $00, $80, $01, $00, $00, $02, $00, $08, $0F, $80, $01, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[6] = { program.local[0..4],'#13+
    '		{ 1, 0.2 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'ADD R0.xy, fragment.texcoord[0], -c[0];'#13+
    'RCP R0.z, c[4].x;'#13+
    'MUL R0.y, R0, R0.z;'#13+
    'MUL R0.zw, R0.xyxy, R0.xyxy;'#13+
    'ADD R0.z, R0, R0.w;'#13+
    'RSQ R0.z, R0.z;'#13+
    'RCP R0.w, R0.z;'#13+
    'MUL R0.xy, R0.z, R0;'#13+
    'MUL R1.x, R0.w, c[2];'#13+
    'ADD R1.y, R1.x, c[3].x;'#13+
    'SIN R1.x, R1.y;'#13+
    'ADD_SAT R1.z, -R0.w, c[5].x;'#13+
    'COS R1.w, R1.y;'#13+
    'MUL R1.y, R1.z, R1.z;'#13+
    'MUL R1.x, R1, c[1];'#13+
    'MAD R0.w, R1.x, R1.y, R0;'#13+
    'MUL_SAT R1.z, R1.y, R1.w;'#13+
    'ADD R1.x, -R1.z, c[5];'#13+
    'MUL R0.z, R1.x, c[1].x;'#13+
    'MUL R0.y, R0, c[4].x;'#13+
    'MAD R1.x, -R0.z, c[5].y, c[5];'#13+
    'MAD R0.xy, R0.w, R0, c[0];'#13+
    'TEX R0, R0, texture[0], 2D;'#13+
    'MUL result.color.xyz, R0, R1.x;'#13+
    'MOV result.color.w, R0;'#13+
    'END';
  GLSLF: PAnsiChar =
    'float _TMP3;'#13+
    'float _TMP1;'#13+
    'float _TMP2;'#13+
    'float _TMP10;'#13+
    'float _s0018;'#13+
    'float _a0018;'#13+
    'float _c0018;'#13+
    'float _x0024;'#13+
    'float _TMP25;'#13+
    'float _x0034;'#13+
    'float _TMP35;'#13+
    'varying vec4 TEX0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform vec4 PSParam2;'#13+
    'uniform vec4 PSParam3;'#13+
    'uniform vec4 PSParam4;'#13+
    'uniform sampler2D texture0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec2 _dir;'#13+
    '    float _dist;'#13+
    '    float _falloff;'#13+
    '    vec2 _samplePoint;'#13+
    '    vec4 _color;'#13+
    '    float _lighting;'#13+
    '    _dir = TEX0.xy - PSParam0.xy;'#13+
    '    _dir.y = _dir.y/PSParam4.x;'#13+
    '    _TMP1 = dot(_dir, _dir);'#13+
    '    _TMP2 = inversesqrt(_TMP1);'#13+
    '    _TMP10 = 1.00000000E+000/_TMP2;'#13+
    '    _dir = _dir/vec2(_TMP10, _TMP10);'#13+
    '    _dir.y = _dir.y*PSParam4.x;'#13+
    '    _a0018 = PSParam2.x*_TMP10 + PSParam3.x;'#13+
    '    _s0018 = sin(_a0018);'#13+
    '    _c0018 = cos(_a0018);'#13+
    '    _x0024 = 1.00000000E+000 - _TMP10;'#13+
    '    _TMP3 = min(1.00000000E+000, _x0024);'#13+
    '    _TMP25 = max(0.0, _TMP3);'#13+
    '    _falloff = _TMP25*_TMP25;'#13+
    '    _dist = _TMP10 + PSParam1.x*_s0018*_falloff;'#13+
    '    _samplePoint = PSParam0.xy + _dist*_dir;'#13+
    '    _color = texture2D(texture0, _samplePoint);'#13+
    '    _x0034 = _c0018*_falloff;'#13+
    '    _TMP3 = min(1.00000000E+000, _x0034);'#13+
    '    _TMP35 = max(0.0, _TMP3);'#13+
    '    _lighting = 1.00000000E+000 - PSParam1.x*2.00000003E-001*(1.00000000E+000 - _TMP35);'#13+
    '    _color.xyz = _color.xyz*vec3(_lighting, _lighting, _lighting);'#13+
    '    gl_FragColor = _color;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[1] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TRippleFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('Ripple', 'An effect that superimposes rippling waves upon the input.', [
    FilterValueRec('Center', 'The center point of the ripples.', TShaderValueType.vtPoint, VarFromPointXY(150, 150), VarFromPointXY(0, 0), VarFromPointXY(65535, 65535)),
    FilterValueRec('Amplitude', 'The amplitude of the ripples.', TShaderValueType.vtFloat, 0.1, 0, 1),
    FilterValueRec('Frequency', 'The frequency of the ripples.', TShaderValueType.vtFloat, 70, 0, 100),
    FilterValueRec('Phase', 'The phase of the ripples.', TShaderValueType.vtFloat, 0, -20, 20),
    FilterValueRec('AspectRatio', 'The aspect ratio (width / height) of the input.', TShaderValueType.vtFloat, 1.5, 0.5, 2)
  ]);
end;

{ TBandsFilter }

constructor TBandsFilter.Create;
const
  DX9PS2BIN: array [0..503] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $36, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $AF, $00, $00, $00, $00, $02, $FF, $FF, $03, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $A8, $00, $00, $00,
    $58, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $64, $00, $00, $00, $00, $00, $00, $00, $74, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $64, $00, $00, $00, $00, $00, $00, $00,
    $82, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $98, $00, $00, $00, $00, $00, $00, $00, $42, $61, $6E, $64, $44, $65, $6E, $73, $69, $74, $79, $00, $00, $00, $03, $00, $01, $00, $01, $00,
    $01, $00, $00, $00, $00, $00, $00, $00, $42, $61, $6E, $64, $49, $6E, $74, $65, $6E, $73, $69, $74, $79, $00, $69, $6D, $70, $6C, $69, $63, $69, $74, $49, $6E, $70, $75, $74, $53, $61, $6D, $70, $6C,
    $65, $72, $00, $AB, $04, $00, $0C, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29,
    $20, $44, $33, $44, $58, $39, $20, $53, $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C, $65, $72, $20, $00, $51, $00, $00, $05, $02, $00, $0F, $A0, $83, $F9, $22, $3E, $00, $00, $00, $3F,
    $DB, $0F, $C9, $40, $DB, $0F, $49, $C0, $51, $00, $00, $05, $03, $00, $0F, $A0, $01, $0D, $D0, $B5, $61, $0B, $B6, $B7, $AB, $AA, $2A, $3B, $89, $88, $88, $39, $51, $00, $00, $05, $04, $00, $0F, $A0,
    $AB, $AA, $AA, $BC, $00, $00, $00, $BE, $00, $00, $80, $3F, $00, $00, $00, $3F, $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90, $00, $08, $0F, $A0,
    $42, $00, $00, $03, $00, $00, $0F, $80, $00, $00, $E4, $B0, $00, $08, $E4, $A0, $05, $00, $00, $03, $01, $00, $08, $80, $00, $00, $00, $B0, $00, $00, $00, $A0, $04, $00, $00, $04, $01, $00, $01, $80,
    $01, $00, $FF, $80, $02, $00, $00, $A0, $02, $00, $55, $A0, $13, $00, $00, $02, $01, $00, $01, $80, $01, $00, $00, $80, $04, $00, $00, $04, $01, $00, $01, $80, $01, $00, $00, $80, $02, $00, $AA, $A0,
    $02, $00, $FF, $A0, $25, $00, $00, $04, $02, $00, $03, $80, $01, $00, $00, $80, $03, $00, $E4, $A0, $04, $00, $E4, $A0, $06, $00, $00, $02, $01, $00, $01, $80, $02, $00, $00, $80, $05, $00, $00, $03,
    $01, $00, $01, $80, $02, $00, $55, $80, $01, $00, $00, $80, $05, $00, $00, $03, $01, $00, $01, $80, $01, $00, $00, $80, $01, $00, $00, $A0, $04, $00, $00, $04, $00, $00, $07, $80, $01, $00, $00, $80,
    $02, $00, $55, $A0, $00, $00, $E4, $80, $01, $00, $00, $02, $00, $08, $0F, $80, $00, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[3] = { program.local[0..1],'#13+
    '		{ 0.5 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'MUL R0.x, fragment.texcoord[0], c[0];'#13+
    'COS R0.y, R0.x;'#13+
    'RCP R0.y, R0.y;'#13+
    'SIN R0.x, R0.x;'#13+
    'MUL R1.x, R0, R0.y;'#13+
    'TEX R0, fragment.texcoord[0], texture[0], 2D;'#13+
    'MUL R1.x, R1, c[1];'#13+
    'MAD result.color.xyz, R1.x, c[2].x, R0;'#13+
    'MOV result.color.w, R0;'#13+
    'END';
  GLSLF: PAnsiChar =
    'float _TMP0;'#13+
    'float _x0007;'#13+
    'float _s0008;'#13+
    'float _c0008;'#13+
    'varying vec4 TEX0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform sampler2D texture0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec4 _color;'#13+
    '    _color = texture2D(texture0, TEX0.xy);'#13+
    '    _x0007 = TEX0.x*PSParam0.x;'#13+
    '    _s0008 = sin(_x0007);'#13+
    '    _c0008 = cos(_x0007);'#13+
    '    _TMP0 = _s0008/_c0008;'#13+
    '    _color.xyz = _color.xyz + vec3(_TMP0*PSParam1.x*5.00000000E-001, _TMP0*PSParam1.x*5.00000000E-001, _TMP0*PSParam1.x*5.00000000E-001);'#13+
    '    gl_FragColor = _color;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[1] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TBandsFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('Bands', 'An effect that creates bands of bright regions.', [
    FilterValueRec('BandDensity', 'The number of verical bands to add to the output. The higher the value the more bands.', TShaderValueType.vtFloat, 65, 0, 150),
    FilterValueRec('BandIntensity', 'Intensity of each band.', TShaderValueType.vtFloat, 0.2, 0, 1)
  ]);
end;

{ TPinchFilter }

constructor TPinchFilter.Create;
const
  DX9PS2BIN: array [0..731] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $45, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $EB, $00, $00, $00, $00, $02, $FF, $FF, $05, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $E4, $00, $00, $00,
    $80, $00, $00, $00, $02, $00, $03, $00, $01, $00, $0E, $00, $8C, $00, $00, $00, $00, $00, $00, $00, $9C, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $A4, $00, $00, $00, $00, $00, $00, $00,
    $B4, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $8C, $00, $00, $00, $00, $00, $00, $00, $BB, $00, $00, $00, $02, $00, $02, $00, $01, $00, $0A, $00, $8C, $00, $00, $00, $00, $00, $00, $00,
    $C4, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $D4, $00, $00, $00, $00, $00, $00, $00, $41, $73, $70, $65, $63, $74, $52, $61, $74, $69, $6F, $00, $00, $00, $03, $00, $01, $00, $01, $00,
    $01, $00, $00, $00, $00, $00, $00, $00, $43, $65, $6E, $74, $65, $72, $00, $AB, $01, $00, $03, $00, $01, $00, $02, $00, $01, $00, $00, $00, $00, $00, $00, $00, $52, $61, $64, $69, $75, $73, $00, $53,
    $74, $72, $65, $6E, $67, $74, $68, $00, $54, $65, $78, $74, $75, $72, $65, $31, $53, $61, $6D, $70, $6C, $65, $72, $00, $04, $00, $0C, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00,
    $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29, $20, $44, $33, $44, $58, $39, $20, $53, $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C,
    $65, $72, $20, $00, $51, $00, $00, $05, $04, $00, $0F, $A0, $DB, $0F, $C9, $40, $DB, $0F, $49, $C0, $00, $00, $80, $3F, $00, $00, $00, $00, $51, $00, $00, $05, $05, $00, $0F, $A0, $00, $00, $00, $00,
    $83, $F9, $A2, $3F, $00, $00, $00, $3F, $77, $CC, $2B, $32, $51, $00, $00, $05, $06, $00, $0F, $A0, $01, $0D, $D0, $B5, $61, $0B, $B6, $B7, $AB, $AA, $2A, $3B, $89, $88, $88, $39, $51, $00, $00, $05,
    $07, $00, $0F, $A0, $AB, $AA, $AA, $BC, $00, $00, $00, $BE, $00, $00, $80, $3F, $00, $00, $00, $3F, $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90,
    $00, $08, $0F, $A0, $01, $00, $00, $02, $00, $00, $06, $80, $05, $00, $E4, $A0, $04, $00, $00, $04, $00, $00, $01, $80, $01, $00, $00, $A0, $00, $00, $55, $80, $00, $00, $AA, $80, $13, $00, $00, $02,
    $00, $00, $01, $80, $00, $00, $00, $80, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $00, $80, $04, $00, $00, $A0, $04, $00, $55, $A0, $25, $00, $00, $04, $01, $00, $02, $80, $00, $00, $00, $80,
    $06, $00, $E4, $A0, $07, $00, $E4, $A0, $05, $00, $00, $03, $00, $00, $01, $80, $01, $00, $55, $81, $01, $00, $00, $A0, $23, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $02, $00, $00, $03,
    $00, $00, $01, $80, $00, $00, $00, $80, $05, $00, $FF, $A0, $06, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $06, $00, $00, $02, $00, $00, $02, $80, $03, $00, $00, $A0, $02, $00, $00, $03,
    $01, $00, $03, $80, $00, $00, $E4, $B1, $00, $00, $E4, $A0, $05, $00, $00, $03, $02, $00, $02, $80, $00, $00, $55, $80, $01, $00, $55, $80, $01, $00, $00, $02, $02, $00, $01, $80, $01, $00, $00, $80,
    $5A, $00, $00, $04, $00, $00, $02, $80, $02, $00, $E4, $80, $02, $00, $E4, $80, $05, $00, $00, $A0, $07, $00, $00, $02, $00, $00, $02, $80, $00, $00, $55, $80, $06, $00, $00, $02, $00, $00, $02, $80,
    $00, $00, $55, $80, $04, $00, $00, $04, $00, $00, $11, $80, $00, $00, $55, $80, $00, $00, $00, $81, $04, $00, $AA, $A0, $05, $00, $00, $03, $00, $00, $03, $80, $01, $00, $E4, $80, $00, $00, $00, $80,
    $04, $00, $00, $04, $00, $00, $03, $80, $00, $00, $E4, $80, $02, $00, $00, $A0, $00, $00, $E4, $B0, $42, $00, $00, $03, $00, $00, $0F, $80, $00, $00, $E4, $80, $00, $08, $E4, $A0, $01, $00, $00, $02,
    $00, $08, $0F, $80, $00, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[5] = { program.local[0..3],'#13+
    '		{ 1, 8, 9.9999999e-009 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'MOV R0.z, c[4].y;'#13+
    'MUL R0.z, R0, c[1].x;'#13+
    'SIN R1.x, R0.z;'#13+
    'ADD R0.xy, -fragment.texcoord[0], c[0];'#13+
    'RCP R0.w, c[3].x;'#13+
    'MUL R1.x, -R1, c[1];'#13+
    'MUL R0.w, R0.y, R0;'#13+
    'MOV R0.z, R0.x;'#13+
    'MUL R0.zw, R0, R0;'#13+
    'ADD R0.z, R0, R0.w;'#13+
    'ABS R1.x, R1;'#13+
    'ADD R0.w, R1.x, c[4].z;'#13+
    'RSQ R0.z, R0.z;'#13+
    'RCP R0.w, R0.w;'#13+
    'RCP R0.z, R0.z;'#13+
    'MAD_SAT R0.z, -R0, R0.w, c[4].x;'#13+
    'MUL R0.xy, R0, R0.z;'#13+
    'MAD R0.xy, R0, c[2].x, fragment.texcoord[0];'#13+
    'TEX result.color, R0, texture[0], 2D;'#13+
    'END';
  GLSLF: PAnsiChar =
    'vec4 _ret_0;'#13+
    'float _TMP1;'#13+
    'float _TMP4;'#13+
    'float _TMP0;'#13+
    'float _TMP2;'#13+
    'float _TMP3;'#13+
    'float _TMP10;'#13+
    'float _a0019;'#13+
    'float _a0021;'#13+
    'float _x0023;'#13+
    'float _TMP24;'#13+
    'varying vec4 TEX0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform vec4 PSParam2;'#13+
    'uniform vec4 PSParam3;'#13+
    'uniform sampler2D texture0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec2 _dir;'#13+
    '    vec2 _scaledDir;'#13+
    '    vec2 _samplePoint;'#13+
    '    _dir = PSParam0.xy - TEX0.xy;'#13+
    '    _scaledDir = _dir;'#13+
    '    _scaledDir.y = _dir.y/PSParam3.x;'#13+
    '    _TMP2 = dot(_scaledDir, _scaledDir);'#13+
    '    _TMP3 = inversesqrt(_TMP2);'#13+
    '    _TMP10 = 1.00000000E+000/_TMP3;'#13+
    '    _a0019 = PSParam1.x*8.00000000E+000;'#13+
    '    _TMP0 = sin(_a0019);'#13+
    '    _a0021 = -_TMP0*PSParam1.x;'#13+
    '    _TMP1 = abs(_a0021);'#13+
    '    _x0023 = 1.00000000E+000 - _TMP10/(_TMP1 + 9.99999994E-009);'#13+
    '    _TMP4 = min(1.00000000E+000, _x0023);'#13+
    '    _TMP24 = max(0.0, _TMP4);'#13+
    '    _samplePoint = TEX0.xy + _dir*_TMP24*PSParam2.x;'#13+
    '    _ret_0 = texture2D(texture0, _samplePoint);'#13+
    '    gl_FragColor = _ret_0;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[1] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TPinchFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('Pinch', 'An effect that pinches a circular region.', [
    FilterValueRec('Center', 'The center point of the pinched region.', TShaderValueType.vtPoint, VarFromPointXY(150, 150), VarFromPointXY(0, 0), VarFromPointXY(65535, 65535)),
    FilterValueRec('Radius', 'The radius of the pinched region.', TShaderValueType.vtFloat, 0.25, 0, 1),
    FilterValueRec('Strength', 'The amount of twist to the spiral.', TShaderValueType.vtFloat, 10, 0, 20),
    FilterValueRec('AspectRatio', 'The aspect ratio (width / height) of the input.', TShaderValueType.vtFloat, 1.5, 0.5, 2)
  ]);
end;

{ TSwirlFilter }

constructor TSwirlFilter.Create;
const
  DX9PS2BIN: array [0..1211] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $41, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $DB, $00, $00, $00, $00, $02, $FF, $FF, $04, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $D4, $00, $00, $00,
    $6C, $00, $00, $00, $02, $00, $02, $00, $01, $00, $0A, $00, $78, $00, $00, $00, $00, $00, $00, $00, $88, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $90, $00, $00, $00, $00, $00, $00, $00,
    $A0, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $78, $00, $00, $00, $00, $00, $00, $00, $AF, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $C4, $00, $00, $00, $00, $00, $00, $00,
    $41, $73, $70, $65, $63, $74, $52, $61, $74, $69, $6F, $00, $00, $00, $03, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $43, $65, $6E, $74, $65, $72, $00, $AB, $01, $00, $03, $00,
    $01, $00, $02, $00, $01, $00, $00, $00, $00, $00, $00, $00, $53, $70, $69, $72, $61, $6C, $53, $74, $72, $65, $6E, $67, $74, $68, $00, $69, $6D, $70, $6C, $69, $63, $69, $74, $49, $6E, $70, $75, $74,
    $53, $61, $6D, $70, $6C, $65, $72, $00, $04, $00, $0C, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74,
    $20, $28, $52, $29, $20, $44, $33, $44, $58, $39, $20, $53, $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C, $65, $72, $20, $00, $51, $00, $00, $05, $03, $00, $0F, $A0, $04, $1D, $A9, $BE,
    $38, $F7, $7F, $3F, $00, $00, $00, $00, $00, $00, $80, $3F, $51, $00, $00, $05, $04, $00, $0F, $A0, $00, $00, $00, $00, $5F, $AE, $AA, $3C, $36, $5A, $AE, $BD, $E2, $76, $38, $3E, $51, $00, $00, $05,
    $05, $00, $0F, $A0, $00, $00, $00, $C0, $DB, $0F, $C9, $3F, $DB, $0F, $49, $C0, $DB, $0F, $C9, $40, $51, $00, $00, $05, $06, $00, $0F, $A0, $83, $F9, $22, $3E, $00, $00, $00, $3F, $00, $00, $00, $00,
    $00, $00, $00, $00, $51, $00, $00, $05, $07, $00, $0F, $A0, $01, $0D, $D0, $B5, $61, $0B, $B6, $B7, $AB, $AA, $2A, $3B, $89, $88, $88, $39, $51, $00, $00, $05, $08, $00, $0F, $A0, $AB, $AA, $AA, $BC,
    $00, $00, $00, $BE, $00, $00, $80, $3F, $00, $00, $00, $3F, $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90, $00, $08, $0F, $A0, $06, $00, $00, $02,
    $00, $00, $08, $80, $02, $00, $00, $A0, $02, $00, $00, $03, $00, $00, $03, $80, $00, $00, $E4, $B0, $00, $00, $E4, $A1, $05, $00, $00, $03, $00, $00, $02, $80, $00, $00, $FF, $80, $00, $00, $55, $80,
    $23, $00, $00, $02, $00, $00, $04, $80, $00, $00, $55, $80, $23, $00, $00, $02, $00, $00, $08, $80, $00, $00, $00, $80, $0B, $00, $00, $03, $01, $00, $08, $80, $00, $00, $AA, $80, $00, $00, $FF, $80,
    $06, $00, $00, $02, $01, $00, $01, $80, $01, $00, $FF, $80, $0A, $00, $00, $03, $01, $00, $02, $80, $00, $00, $FF, $80, $00, $00, $AA, $80, $02, $00, $00, $03, $00, $00, $04, $80, $00, $00, $AA, $81,
    $00, $00, $FF, $80, $05, $00, $00, $03, $00, $00, $08, $80, $01, $00, $00, $80, $01, $00, $55, $80, $05, $00, $00, $03, $01, $00, $01, $80, $00, $00, $FF, $80, $00, $00, $FF, $80, $04, $00, $00, $04,
    $01, $00, $02, $80, $01, $00, $00, $80, $04, $00, $55, $A0, $04, $00, $AA, $A0, $04, $00, $00, $04, $01, $00, $02, $80, $01, $00, $00, $80, $01, $00, $55, $80, $04, $00, $FF, $A0, $04, $00, $00, $04,
    $01, $00, $02, $80, $01, $00, $00, $80, $01, $00, $55, $80, $03, $00, $00, $A0, $04, $00, $00, $04, $01, $00, $01, $80, $01, $00, $00, $80, $01, $00, $55, $80, $03, $00, $55, $A0, $05, $00, $00, $03,
    $00, $00, $08, $80, $00, $00, $FF, $80, $01, $00, $00, $80, $04, $00, $00, $04, $01, $00, $01, $80, $00, $00, $FF, $80, $05, $00, $00, $A0, $05, $00, $55, $A0, $58, $00, $00, $04, $00, $00, $04, $80,
    $00, $00, $AA, $80, $03, $00, $AA, $A0, $03, $00, $FF, $A0, $04, $00, $00, $04, $00, $00, $04, $80, $01, $00, $00, $80, $00, $00, $AA, $80, $00, $00, $FF, $80, $58, $00, $00, $04, $00, $00, $08, $80,
    $00, $00, $00, $80, $03, $00, $AA, $A0, $03, $00, $FF, $A0, $04, $00, $00, $04, $00, $00, $04, $80, $00, $00, $FF, $80, $05, $00, $AA, $A0, $00, $00, $AA, $80, $02, $00, $00, $03, $00, $00, $08, $80,
    $00, $00, $AA, $80, $00, $00, $AA, $80, $0A, $00, $00, $03, $01, $00, $01, $80, $00, $00, $00, $80, $00, $00, $55, $80, $58, $00, $00, $04, $01, $00, $01, $80, $01, $00, $00, $80, $03, $00, $AA, $A0,
    $03, $00, $FF, $A0, $0B, $00, $00, $03, $01, $00, $02, $80, $00, $00, $55, $80, $00, $00, $00, $80, $58, $00, $00, $04, $01, $00, $02, $80, $01, $00, $55, $80, $03, $00, $FF, $A0, $03, $00, $AA, $A0,
    $05, $00, $00, $03, $01, $00, $01, $80, $01, $00, $00, $80, $01, $00, $55, $80, $04, $00, $00, $04, $00, $00, $04, $80, $01, $00, $00, $80, $00, $00, $FF, $81, $00, $00, $AA, $80, $5A, $00, $00, $04,
    $00, $00, $01, $80, $00, $00, $E4, $80, $00, $00, $E4, $80, $04, $00, $00, $A0, $07, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $06, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80,
    $04, $00, $00, $04, $00, $00, $02, $80, $01, $00, $00, $A0, $00, $00, $00, $80, $00, $00, $AA, $80, $04, $00, $00, $04, $00, $00, $02, $80, $00, $00, $55, $80, $06, $00, $00, $A0, $06, $00, $55, $A0,
    $13, $00, $00, $02, $00, $00, $02, $80, $00, $00, $55, $80, $04, $00, $00, $04, $00, $00, $02, $80, $00, $00, $55, $80, $05, $00, $FF, $A0, $05, $00, $AA, $A0, $25, $00, $00, $04, $01, $00, $03, $80,
    $00, $00, $55, $80, $07, $00, $E4, $A0, $08, $00, $E4, $A0, $05, $00, $00, $03, $01, $00, $02, $80, $01, $00, $55, $80, $02, $00, $00, $A0, $04, $00, $00, $04, $00, $00, $03, $80, $01, $00, $E4, $80,
    $00, $00, $00, $80, $00, $00, $E4, $A0, $02, $00, $00, $03, $00, $00, $04, $80, $00, $00, $00, $81, $03, $00, $FF, $A0, $58, $00, $00, $04, $00, $00, $04, $80, $00, $00, $AA, $80, $03, $00, $FF, $A0,
    $03, $00, $AA, $A0, $58, $00, $00, $04, $00, $00, $08, $80, $00, $00, $00, $80, $03, $00, $FF, $A0, $03, $00, $AA, $A0, $42, $00, $00, $03, $01, $00, $0F, $80, $00, $00, $E4, $80, $00, $08, $E4, $A0,
    $05, $00, $00, $03, $00, $00, $01, $80, $00, $00, $AA, $80, $00, $00, $FF, $80, $58, $00, $00, $04, $00, $00, $0F, $80, $00, $00, $00, $81, $04, $00, $00, $A0, $01, $00, $E4, $80, $01, $00, $00, $02,
    $00, $08, $0F, $80, $00, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[6] = { program.local[0..2],'#13+
    '		{ 0, 1, -0.01348047, 0.05747731 },'#13+
    '		{ 0.1212391, 0.1956359, 0.33299461, 0.99999559 },'#13+
    '		{ 1.570796, 3.141593 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'ADD R0.zw, fragment.texcoord[0].xyxy, -c[0].xyxy;'#13+
    'RCP R0.x, c[2].x;'#13+
    'MUL R0.x, R0.w, R0;'#13+
    'ABS R0.w, R0.x;'#13+
    'ABS R0.y, R0.z;'#13+
    'MAX R1.x, R0.y, R0.w;'#13+
    'RCP R1.y, R1.x;'#13+
    'MIN R1.x, R0.y, R0.w;'#13+
    'MUL R1.x, R1, R1.y;'#13+
    'MUL R1.y, R1.x, R1.x;'#13+
    'SLT R0.y, R0, R0.w;'#13+
    'MAD R1.z, R1.y, c[3], c[3].w;'#13+
    'MAD R1.z, R1, R1.y, -c[4].x;'#13+
    'MAD R1.z, R1, R1.y, c[4].y;'#13+
    'ABS R0.y, R0;'#13+
    'CMP R0.w, -R0.y, c[3].x, c[3].y;'#13+
    'MAD R1.z, R1, R1.y, -c[4];'#13+
    'MAD R1.y, R1.z, R1, c[4].w;'#13+
    'MUL R1.x, R1.y, R1;'#13+
    'ADD R1.y, -R1.x, c[5].x;'#13+
    'CMP R0.w, -R0, R1.x, R1.y;'#13+
    'SLT R0.y, fragment.texcoord[0].x, c[0].x;'#13+
    'ABS R0.y, R0;'#13+
    'ADD R1.x, -R0.w, c[5].y;'#13+
    'CMP R0.y, -R0, c[3].x, c[3];'#13+
    'CMP R0.y, -R0, R0.w, R1.x;'#13+
    'MOV R0.w, R0.x;'#13+
    'MUL R0.zw, R0, R0;'#13+
    'SLT R1.x, R0, c[3];'#13+
    'ADD R0.x, R0.z, R0.w;'#13+
    'ABS R0.z, R1.x;'#13+
    'CMP R0.z, -R0, c[3].x, c[3].y;'#13+
    'CMP R0.y, -R0.z, R0, -R0;'#13+
    'RSQ R0.x, R0.x;'#13+
    'RCP R0.z, R0.x;'#13+
    'MAD R0.x, R0.z, c[1], R0.y;'#13+
    'SIN R0.y, R0.x;'#13+
    'COS R0.x, R0.x;'#13+
    'MUL R0.y, R0, c[2].x;'#13+
    'MUL R0.zw, R0.xyxy, R0.z;'#13+
    'ADD R0.xy, R0.zwzw, c[0];'#13+
    'SGE R1.xy, c[3].y, R0;'#13+
    'SGE R0.zw, R0, -c[0].xyxy;'#13+
    'MUL R0.zw, R0, R1.xyxy;'#13+
    'MUL R0.z, R0, R0.w;'#13+
    'ABS R1.x, R0.z;'#13+
    'TEX R0, R0, texture[0], 2D;'#13+
    'CMP R1.x, -R1, c[3], c[3].y;'#13+
    'CMP result.color, -R1.x, c[3].x, R0;'#13+
    'END';
  GLSLF: PAnsiChar =
    'vec4 _TMP0;'#13+
    'float _TMP6;'#13+
    'float _TMP5;'#13+
    'float _TMP2;'#13+
    'float _TMP4;'#13+
    'float _TMP3;'#13+
    'float _TMP1;'#13+
    'float _TMP7;'#13+
    'float _TMP12;'#13+
    'float _t30021;'#13+
    'float _t10021;'#13+
    'float _t00021;'#13+
    'float _t40021;'#13+
    'float _s0034;'#13+
    'float _c0034;'#13+
    'bvec2 _a0040;'#13+
    'varying vec4 TEX0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform vec4 PSParam2;'#13+
    'uniform sampler2D texture0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec2 _dir;'#13+
    '    float _newAngle;'#13+
    '    vec2 _newDir;'#13+
    '    vec2 _samplePoint;'#13+
    '    bool _isValid;'#13+
    '    _dir = TEX0.xy - PSParam0.xy;'#13+
    '    _dir.y = _dir.y/PSParam2.x;'#13+
    '    _TMP1 = dot(_dir, _dir);'#13+
    '    _TMP7 = inversesqrt(_TMP1);'#13+
    '    _TMP12 = 1.00000000E+000/_TMP7;'#13+
    '    _t30021 = abs(_dir.x);'#13+
    '    _t10021 = abs(_dir.y);'#13+
    '    _t00021 = max(_t30021, _t10021);'#13+
    '    _t10021 = min(_t30021, _t10021);'#13+
    '    _t30021 = 1.00000000E+000/_t00021;'#13+
    '    _t30021 = _t10021*_t30021;'#13+
    '    _t40021 = _t30021*_t30021;'#13+
    '    _t00021 = -1.34804696E-002*_t40021 + 5.74773103E-002;'#13+
    '    _t00021 = _t00021*_t40021 - 1.21239103E-001;'#13+
    '    _t00021 = _t00021*_t40021 + 1.95635900E-001;'#13+
    '    _t00021 = _t00021*_t40021 - 3.32994610E-001;'#13+
    '    _t00021 = _t00021*_t40021 + 9.99995589E-001;'#13+
    '    _t30021 = _t00021*_t30021;'#13+
    '    _TMP3 = abs(_dir.y);'#13+
    '    _TMP4 = abs(_dir.x);'#13+
    '    if (_TMP3 > _TMP4) { '#13+
    '        _TMP2 = 1.57079601E+000 - _t30021;'#13+
    '    } else {'#13+
    '        _TMP2 = _t30021;'#13+
    '    } // end if'#13+
    '    if (_dir.x < 0.0) { '#13+
    '        _TMP5 = 3.14159298E+000 - _TMP2;'#13+
    '    } else {'#13+
    '        _TMP5 = _TMP2;'#13+
    '    } // end if'#13+
    '    if (_dir.y < 0.0) { '#13+
    '        _TMP6 = -_TMP5;'#13+
    '    } else {'#13+
    '        _TMP6 = _TMP5;'#13+
    '    } // end if'#13+
    '    _newAngle = _TMP6 + PSParam1.x*_TMP12;'#13+
    '    _s0034 = sin(_newAngle);'#13+
    '    _c0034 = cos(_newAngle);'#13+
    '    _newDir.x = _c0034;'#13+
    '    _newDir.y = _s0034*PSParam2.x;'#13+
    '    _samplePoint = PSParam0.xy + _newDir*_TMP12;'#13+
    '    _a0040 = bvec2(_samplePoint.x >= 0.0 && _samplePoint.x <= 1.00000000E+000, _samplePoint.y >= 0.0 && _samplePoint.y <= 1.00000000E+000);'#13+
    '    _isValid = _a0040.x && _a0040.y;'#13+
    '    if (_isValid) { '#13+
    '        _TMP0 = texture2D(texture0, _samplePoint);'#13+
    '    } else {'#13+
    '        _TMP0 = vec4( 0.0, 0.0, 0.0, 0.0);'#13+
    '    } // end if'#13+
    '    gl_FragColor = _TMP0;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[1] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TSwirlFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('Swirl', 'An effect that swirls the input in a spiral.', [
    FilterValueRec('Center', 'The center point of the ripples.', TShaderValueType.vtPoint, VarFromPointXY(150, 150), VarFromPointXY(0, 0), VarFromPointXY(65535, 65535)),
    FilterValueRec('Strength', 'The amount of twist to the spiral.', TShaderValueType.vtFloat, 10, -70, 70),
    FilterValueRec('AspectRatio', 'The aspect ratio (width / height) of the input.', TShaderValueType.vtFloat, 1.5, 0.5, 2)
  ]);
end;

{ TBandedSwirlFilter }

constructor TBandedSwirlFilter.Create;
const
  DX9PS2BIN: array [0..1351] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $45, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $EB, $00, $00, $00, $00, $02, $FF, $FF, $05, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $E4, $00, $00, $00,
    $80, $00, $00, $00, $02, $00, $03, $00, $01, $00, $0E, $00, $8C, $00, $00, $00, $00, $00, $00, $00, $9C, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $8C, $00, $00, $00, $00, $00, $00, $00,
    $A2, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $AC, $00, $00, $00, $00, $00, $00, $00, $BC, $00, $00, $00, $02, $00, $02, $00, $01, $00, $0A, $00, $8C, $00, $00, $00, $00, $00, $00, $00,
    $C5, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $D4, $00, $00, $00, $00, $00, $00, $00, $41, $73, $70, $65, $63, $74, $52, $61, $74, $69, $6F, $00, $00, $00, $03, $00, $01, $00, $01, $00,
    $01, $00, $00, $00, $00, $00, $00, $00, $42, $61, $6E, $64, $73, $00, $43, $65, $6E, $74, $65, $72, $00, $AB, $AB, $AB, $01, $00, $03, $00, $01, $00, $02, $00, $01, $00, $00, $00, $00, $00, $00, $00,
    $53, $74, $72, $65, $6E, $67, $74, $68, $00, $69, $6E, $70, $75, $74, $53, $6F, $75, $72, $63, $65, $00, $AB, $AB, $AB, $04, $00, $0C, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00,
    $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29, $20, $44, $33, $44, $58, $39, $20, $53, $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C,
    $65, $72, $20, $00, $51, $00, $00, $05, $04, $00, $0F, $A0, $00, $00, $00, $00, $5F, $AE, $AA, $3C, $36, $5A, $AE, $BD, $E2, $76, $38, $3E, $51, $00, $00, $05, $05, $00, $0F, $A0, $04, $1D, $A9, $BE,
    $38, $F7, $7F, $3F, $00, $00, $00, $00, $00, $00, $80, $3F, $51, $00, $00, $05, $06, $00, $0F, $A0, $00, $00, $00, $C0, $DB, $0F, $C9, $3F, $DB, $0F, $49, $C0, $00, $00, $80, $BE, $51, $00, $00, $05,
    $07, $00, $0F, $A0, $00, $00, $00, $BF, $00, $00, $00, $41, $00, $00, $80, $3F, $00, $00, $40, $BF, $51, $00, $00, $05, $08, $00, $0F, $A0, $83, $F9, $22, $3E, $00, $00, $00, $3F, $DB, $0F, $C9, $40,
    $DB, $0F, $49, $C0, $51, $00, $00, $05, $09, $00, $0F, $A0, $01, $0D, $D0, $B5, $61, $0B, $B6, $B7, $AB, $AA, $2A, $3B, $89, $88, $88, $39, $51, $00, $00, $05, $0A, $00, $0F, $A0, $AB, $AA, $AA, $BC,
    $00, $00, $00, $BE, $00, $00, $80, $3F, $00, $00, $00, $3F, $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90, $00, $08, $0F, $A0, $06, $00, $00, $02,
    $00, $00, $08, $80, $03, $00, $00, $A0, $02, $00, $00, $03, $00, $00, $03, $80, $00, $00, $E4, $B0, $00, $00, $E4, $A1, $05, $00, $00, $03, $00, $00, $02, $80, $00, $00, $FF, $80, $00, $00, $55, $80,
    $23, $00, $00, $02, $00, $00, $04, $80, $00, $00, $55, $80, $23, $00, $00, $02, $00, $00, $08, $80, $00, $00, $00, $80, $0B, $00, $00, $03, $01, $00, $08, $80, $00, $00, $AA, $80, $00, $00, $FF, $80,
    $06, $00, $00, $02, $01, $00, $01, $80, $01, $00, $FF, $80, $0A, $00, $00, $03, $01, $00, $02, $80, $00, $00, $FF, $80, $00, $00, $AA, $80, $02, $00, $00, $03, $00, $00, $04, $80, $00, $00, $AA, $81,
    $00, $00, $FF, $80, $05, $00, $00, $03, $00, $00, $08, $80, $01, $00, $00, $80, $01, $00, $55, $80, $05, $00, $00, $03, $01, $00, $01, $80, $00, $00, $FF, $80, $00, $00, $FF, $80, $04, $00, $00, $04,
    $01, $00, $02, $80, $01, $00, $00, $80, $04, $00, $55, $A0, $04, $00, $AA, $A0, $04, $00, $00, $04, $01, $00, $02, $80, $01, $00, $00, $80, $01, $00, $55, $80, $04, $00, $FF, $A0, $04, $00, $00, $04,
    $01, $00, $02, $80, $01, $00, $00, $80, $01, $00, $55, $80, $05, $00, $00, $A0, $04, $00, $00, $04, $01, $00, $01, $80, $01, $00, $00, $80, $01, $00, $55, $80, $05, $00, $55, $A0, $05, $00, $00, $03,
    $00, $00, $08, $80, $00, $00, $FF, $80, $01, $00, $00, $80, $04, $00, $00, $04, $01, $00, $01, $80, $00, $00, $FF, $80, $06, $00, $00, $A0, $06, $00, $55, $A0, $58, $00, $00, $04, $00, $00, $04, $80,
    $00, $00, $AA, $80, $05, $00, $AA, $A0, $05, $00, $FF, $A0, $04, $00, $00, $04, $00, $00, $04, $80, $01, $00, $00, $80, $00, $00, $AA, $80, $00, $00, $FF, $80, $58, $00, $00, $04, $00, $00, $08, $80,
    $00, $00, $00, $80, $05, $00, $AA, $A0, $05, $00, $FF, $A0, $04, $00, $00, $04, $00, $00, $04, $80, $00, $00, $FF, $80, $06, $00, $AA, $A0, $00, $00, $AA, $80, $02, $00, $00, $03, $00, $00, $08, $80,
    $00, $00, $AA, $80, $00, $00, $AA, $80, $0A, $00, $00, $03, $01, $00, $01, $80, $00, $00, $00, $80, $00, $00, $55, $80, $58, $00, $00, $04, $01, $00, $01, $80, $01, $00, $00, $80, $05, $00, $AA, $A0,
    $05, $00, $FF, $A0, $0B, $00, $00, $03, $01, $00, $02, $80, $00, $00, $55, $80, $00, $00, $00, $80, $58, $00, $00, $04, $01, $00, $02, $80, $01, $00, $55, $80, $05, $00, $FF, $A0, $05, $00, $AA, $A0,
    $05, $00, $00, $03, $01, $00, $01, $80, $01, $00, $00, $80, $01, $00, $55, $80, $04, $00, $00, $04, $00, $00, $04, $80, $01, $00, $00, $80, $00, $00, $FF, $81, $00, $00, $AA, $80, $5A, $00, $00, $04,
    $00, $00, $01, $80, $00, $00, $E4, $80, $00, $00, $E4, $80, $04, $00, $00, $A0, $07, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $06, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80,
    $05, $00, $00, $03, $00, $00, $02, $80, $00, $00, $00, $80, $01, $00, $00, $A0, $13, $00, $00, $02, $00, $00, $02, $80, $00, $00, $55, $80, $02, $00, $00, $03, $00, $00, $08, $80, $00, $00, $55, $80,
    $07, $00, $FF, $A0, $04, $00, $00, $04, $01, $00, $01, $80, $00, $00, $FF, $80, $07, $00, $55, $A1, $07, $00, $AA, $A0, $58, $00, $00, $04, $00, $00, $08, $80, $00, $00, $FF, $80, $01, $00, $00, $81,
    $05, $00, $FF, $A1, $02, $00, $00, $03, $01, $00, $01, $80, $00, $00, $55, $80, $07, $00, $00, $A0, $02, $00, $00, $03, $00, $00, $02, $80, $00, $00, $55, $80, $06, $00, $FF, $A0, $04, $00, $00, $04,
    $01, $00, $02, $80, $00, $00, $55, $80, $07, $00, $55, $A1, $07, $00, $AA, $A0, $58, $00, $00, $04, $00, $00, $08, $80, $01, $00, $00, $80, $00, $00, $FF, $80, $01, $00, $55, $80, $58, $00, $00, $04,
    $00, $00, $02, $80, $00, $00, $55, $80, $00, $00, $FF, $80, $05, $00, $FF, $A0, $05, $00, $00, $03, $00, $00, $02, $80, $00, $00, $55, $80, $02, $00, $00, $A0, $04, $00, $00, $04, $00, $00, $02, $80,
    $00, $00, $55, $80, $00, $00, $00, $80, $00, $00, $AA, $80, $04, $00, $00, $04, $00, $00, $02, $80, $00, $00, $55, $80, $08, $00, $00, $A0, $08, $00, $55, $A0, $13, $00, $00, $02, $00, $00, $02, $80,
    $00, $00, $55, $80, $04, $00, $00, $04, $00, $00, $02, $80, $00, $00, $55, $80, $08, $00, $AA, $A0, $08, $00, $FF, $A0, $25, $00, $00, $04, $01, $00, $03, $80, $00, $00, $55, $80, $09, $00, $E4, $A0,
    $0A, $00, $E4, $A0, $05, $00, $00, $03, $01, $00, $02, $80, $01, $00, $55, $80, $03, $00, $00, $A0, $04, $00, $00, $04, $00, $00, $03, $80, $00, $00, $00, $80, $01, $00, $E4, $80, $00, $00, $E4, $A0,
    $42, $00, $00, $03, $00, $00, $0F, $80, $00, $00, $E4, $80, $00, $08, $E4, $A0, $01, $00, $00, $02, $00, $08, $0F, $80, $00, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[8] = { program.local[0..3],'#13+
    '		{ 0.25, 0, 1, 0.5 },'#13+
    '		{ 0.75, 8, -1, -0.01348047 },'#13+
    '		{ 0.05747731, 0.1212391, 0.1956359, 0.33299461 },'#13+
    '		{ 0.99999559, 1.570796, 3.141593 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'TEMP R2;'#13+
    'ADD R1.xy, fragment.texcoord[0], -c[0];'#13+
    'RCP R0.x, c[3].x;'#13+
    'MUL R0.x, R1.y, R0;'#13+
    'ABS R1.y, R1.x;'#13+
    'ABS R0.w, R0.x;'#13+
    'MAX R0.y, R1, R0.w;'#13+
    'RCP R0.z, R0.y;'#13+
    'MIN R0.y, R1, R0.w;'#13+
    'MUL R0.y, R0, R0.z;'#13+
    'MUL R0.z, R0.y, R0.y;'#13+
    'SLT R0.w, R1.y, R0;'#13+
    'MUL R1.z, R0, c[5].w;'#13+
    'MOV R1.y, R0.x;'#13+
    'ADD R1.z, R1, c[6].x;'#13+
    'MAD R1.z, R1, R0, -c[6].y;'#13+
    'MAD R1.z, R1, R0, c[6];'#13+
    'MAD R1.z, R1, R0, -c[6].w;'#13+
    'MAD R0.z, R1, R0, c[7].x;'#13+
    'MUL R0.y, R0.z, R0;'#13+
    'MUL R1.xy, R1, R1;'#13+
    'ABS R1.z, R0.w;'#13+
    'ADD R0.w, R1.x, R1.y;'#13+
    'ADD R0.z, -R0.y, c[7].y;'#13+
    'CMP R1.x, -R1.z, c[4].y, c[4].z;'#13+
    'CMP R1.x, -R1, R0.y, R0.z;'#13+
    'RSQ R0.y, R0.w;'#13+
    'RCP R0.y, R0.y;'#13+
    'MUL R0.z, R0.y, c[1].x;'#13+
    'FRC R0.z, R0;'#13+
    'ADD R1.w, R0.z, -c[4].x;'#13+
    'MUL R2.y, -R1.w, c[5];'#13+
    'SLT R0.w, fragment.texcoord[0].x, c[0].x;'#13+
    'ABS R0.w, R0;'#13+
    'ADD R1.y, -R1.x, c[7].z;'#13+
    'CMP R0.w, -R0, c[4].y, c[4].z;'#13+
    'CMP R0.w, -R0, R1.x, R1.y;'#13+
    'SLT R1.x, R0.z, c[4].w;'#13+
    'SLT R1.y, R0.z, c[4].x;'#13+
    'ABS R1.z, R1.x;'#13+
    'ABS R1.y, R1;'#13+
    'CMP R2.x, -R1.y, c[4].y, c[4].z;'#13+
    'CMP R1.z, -R1, c[4].y, c[4];'#13+
    'MUL R1.y, R2.x, R1.z;'#13+
    'SLT R1.z, R0, c[5].x;'#13+
    'MUL R1.w, R1.y, R1.z;'#13+
    'ABS R1.z, R1;'#13+
    'CMP R1.z, -R1, c[4].y, c[4];'#13+
    'ADD R2.y, R2, c[4].z;'#13+
    'MUL R1.x, R2, R1;'#13+
    'CMP R1.x, -R1, R2.y, c[4].z;'#13+
    'CMP R1.x, -R1.w, c[5].z, R1;'#13+
    'ADD R1.w, R0.z, -c[5].x;'#13+
    'MUL R0.z, R1.y, R1;'#13+
    'MUL R1.y, -R1.w, c[5];'#13+
    'SLT R1.z, R0.x, c[4].y;'#13+
    'ADD R0.x, R1.y, c[4].z;'#13+
    'CMP R0.x, -R0.z, -R0, R1;'#13+
    'ABS R1.y, R1.z;'#13+
    'CMP R0.z, -R1.y, c[4].y, c[4];'#13+
    'CMP R0.z, -R0, R0.w, -R0.w;'#13+
    'MUL R0.x, R0, c[2];'#13+
    'MAD R0.x, R0.y, R0, R0.z;'#13+
    'SIN R0.w, R0.x;'#13+
    'COS R0.z, R0.x;'#13+
    'MUL R0.w, R0, c[3].x;'#13+
    'MAD R0.xy, R0.y, R0.zwzw, c[0];'#13+
    'TEX result.color, R0, texture[0], 2D;'#13+
    'END';
  GLSLF: PAnsiChar =
    'vec4 _ret_0;'#13+
    'float _TMP5;'#13+
    'float _TMP4;'#13+
    'float _TMP1;'#13+
    'float _TMP3;'#13+
    'float _TMP2;'#13+
    'float _TMP0;'#13+
    'float _TMP6;'#13+
    'float _TMP12;'#13+
    'float _t30021;'#13+
    'float _t10021;'#13+
    'float _t00021;'#13+
    'float _t40021;'#13+
    'float _x0035;'#13+
    'float _s0036;'#13+
    'float _c0036;'#13+
    'varying vec4 TEX0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform vec4 PSParam2;'#13+
    'uniform vec4 PSParam3;'#13+
    'uniform sampler2D texture0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec2 _dir;'#13+
    '    float _remainder;'#13+
    '    float _fac;'#13+
    '    float _newAngle;'#13+
    '    vec2 _newDir;'#13+
    '    vec2 _samplePoint;'#13+
    '    _dir = TEX0.xy - PSParam0.xy;'#13+
    '    _dir.y = _dir.y/PSParam3.x;'#13+
    '    _TMP0 = dot(_dir, _dir);'#13+
    '    _TMP6 = inversesqrt(_TMP0);'#13+
    '    _TMP12 = 1.00000000E+000/_TMP6;'#13+
    '    _t30021 = abs(_dir.x);'#13+
    '    _t10021 = abs(_dir.y);'#13+
    '    _t00021 = max(_t30021, _t10021);'#13+
    '    _t10021 = min(_t30021, _t10021);'#13+
    '    _t30021 = 1.00000000E+000/_t00021;'#13+
    '    _t30021 = _t10021*_t30021;'#13+
    '    _t40021 = _t30021*_t30021;'#13+
    '    _t00021 = -1.34804696E-002*_t40021 + 5.74773103E-002;'#13+
    '    _t00021 = _t00021*_t40021 - 1.21239103E-001;'#13+
    '    _t00021 = _t00021*_t40021 + 1.95635900E-001;'#13+
    '    _t00021 = _t00021*_t40021 - 3.32994610E-001;'#13+
    '    _t00021 = _t00021*_t40021 + 9.99995589E-001;'#13+
    '    _t30021 = _t00021*_t30021;'#13+
    '    _TMP2 = abs(_dir.y);'#13+
    '    _TMP3 = abs(_dir.x);'#13+
    '    if (_TMP2 > _TMP3) { '#13+
    '        _TMP1 = 1.57079601E+000 - _t30021;'#13+
    '    } else {'#13+
    '        _TMP1 = _t30021;'#13+
    '    } // end if'#13+
    '    if (_dir.x < 0.0) { '#13+
    '        _TMP4 = 3.14159298E+000 - _TMP1;'#13+
    '    } else {'#13+
    '        _TMP4 = _TMP1;'#13+
    '    } // end if'#13+
    '    if (_dir.y < 0.0) { '#13+
    '        _TMP5 = -_TMP4;'#13+
    '    } else {'#13+
    '        _TMP5 = _TMP4;'#13+
    '    } // end if'#13+
    '    _x0035 = _TMP12*PSParam1.x;'#13+
    '    _remainder = fract(_x0035);'#13+
    '    if (_remainder < 2.50000000E-001) { '#13+
    '        _fac = 1.00000000E+000;'#13+
    '    } else {'#13+
    '        if (_remainder < 5.00000000E-001) { '#13+
    '            _fac = 1.00000000E+000 - 8.00000000E+000*(_remainder - 2.50000000E-001);'#13+
    '        } else {'#13+
    '            if (_remainder < 7.50000000E-001) { '#13+
    '                _fac = -1.00000000E+000;'#13+
    '            } else {'#13+
    '                _fac = -(1.00000000E+000 - 8.00000000E+000*(_remainder - 7.50000000E-001));'#13+
    '            } // end if'#13+
    '        } // end if'#13+
    '    } // end if'#13+
    '    _newAngle = _TMP5 + _fac*PSParam2.x*_TMP12;'#13+
    '    _s0036 = sin(_newAngle);'#13+
    '    _c0036 = cos(_newAngle);'#13+
    '    _newDir.x = _c0036;'#13+
    '    _newDir.y = _s0036*PSParam3.x;'#13+
    '    _samplePoint = PSParam0.xy + _TMP12*_newDir;'#13+
    '    _ret_0 = texture2D(texture0, _samplePoint);'#13+
    '    gl_FragColor = _ret_0;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[1] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TBandedSwirlFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('BandedSwirl', 'An effect that swirls the input in alternating clockwise and counterclockwise bands.', [
    FilterValueRec('Center', 'The center point of the ripples.', TShaderValueType.vtPoint, VarFromPointXY(150, 150), VarFromPointXY(0, 0), VarFromPointXY(65535, 65535)),
    FilterValueRec('Bands', 'The number of bands in the swirl.', TShaderValueType.vtFloat, 10, 0, 20),
    FilterValueRec('Strength', 'The amount of twist to the spiral.', TShaderValueType.vtFloat, 30, -70, 70),
    FilterValueRec('AspectRatio', 'The aspect ratio (width / height) of the input.', TShaderValueType.vtFloat, 1.5, 0.5, 2)
  ]);
end;

{ TWaveFilter }

constructor TWaveFilter.Create;
const
  DX9PS2BIN: array [0..1003] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $30, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $97, $00, $00, $00, $00, $02, $FF, $FF, $03, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $90, $00, $00, $00,
    $58, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $60, $00, $00, $00, $00, $00, $00, $00, $70, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $60, $00, $00, $00, $00, $00, $00, $00,
    $79, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $80, $00, $00, $00, $00, $00, $00, $00, $54, $69, $6D, $65, $00, $AB, $AB, $AB, $00, $00, $03, $00, $01, $00, $01, $00, $01, $00, $00, $00,
    $00, $00, $00, $00, $57, $61, $76, $65, $53, $69, $7A, $65, $00, $69, $6E, $70, $75, $74, $00, $AB, $04, $00, $0C, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $70, $73, $5F, $32,
    $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29, $20, $44, $33, $44, $58, $39, $20, $53, $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C, $65, $72, $20, $00,
    $51, $00, $00, $05, $02, $00, $0F, $A0, $6F, $12, $03, $BE, $83, $F9, $22, $3E, $00, $00, $00, $3F, $0A, $D7, $23, $BF, $51, $00, $00, $05, $03, $00, $0F, $A0, $DB, $0F, $C9, $40, $DB, $0F, $49, $C0,
    $25, $49, $12, $3E, $A6, $9B, $44, $BE, $51, $00, $00, $05, $04, $00, $0F, $A0, $01, $0D, $D0, $B5, $61, $0B, $B6, $B7, $AB, $AA, $2A, $3B, $89, $88, $88, $39, $51, $00, $00, $05, $05, $00, $0F, $A0,
    $AB, $AA, $AA, $BC, $00, $00, $00, $BE, $00, $00, $80, $3F, $00, $00, $00, $3F, $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90, $00, $08, $0F, $A0,
    $02, $00, $00, $03, $00, $00, $08, $80, $00, $00, $00, $B0, $00, $00, $00, $A0, $02, $00, $00, $03, $00, $00, $01, $80, $00, $00, $FF, $80, $02, $00, $00, $A0, $02, $00, $00, $03, $00, $00, $02, $80,
    $00, $00, $55, $B0, $02, $00, $00, $A0, $05, $00, $00, $03, $00, $00, $02, $80, $00, $00, $55, $80, $00, $00, $55, $80, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $00, $80, $00, $00, $00, $80,
    $00, $00, $55, $80, $07, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $06, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $05, $00, $00, $03, $00, $00, $01, $80, $00, $00, $00, $80,
    $01, $00, $00, $A0, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $00, $80, $02, $00, $55, $A0, $02, $00, $AA, $A0, $13, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $04, $00, $00, $04,
    $00, $00, $01, $80, $00, $00, $00, $80, $03, $00, $00, $A0, $03, $00, $55, $A0, $25, $00, $00, $04, $01, $00, $02, $80, $00, $00, $00, $80, $04, $00, $E4, $A0, $05, $00, $E4, $A0, $02, $00, $00, $03,
    $00, $00, $01, $80, $00, $00, $55, $B0, $02, $00, $FF, $A0, $05, $00, $00, $03, $00, $00, $01, $80, $00, $00, $00, $80, $00, $00, $00, $80, $02, $00, $00, $03, $00, $00, $02, $80, $00, $00, $00, $B0,
    $02, $00, $FF, $A0, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $55, $80, $00, $00, $55, $80, $00, $00, $00, $80, $07, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $06, $00, $00, $02,
    $00, $00, $01, $80, $00, $00, $00, $80, $05, $00, $00, $03, $00, $00, $01, $80, $00, $00, $00, $80, $01, $00, $00, $A0, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $00, $80, $02, $00, $55, $A0,
    $02, $00, $AA, $A0, $13, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $00, $80, $03, $00, $00, $A0, $03, $00, $55, $A0, $25, $00, $00, $04,
    $02, $00, $02, $80, $00, $00, $00, $80, $04, $00, $E4, $A0, $05, $00, $E4, $A0, $02, $00, $00, $03, $00, $00, $01, $80, $01, $00, $55, $80, $02, $00, $55, $80, $01, $00, $00, $02, $00, $00, $04, $80,
    $03, $00, $AA, $A0, $04, $00, $00, $04, $00, $00, $02, $80, $00, $00, $00, $A0, $00, $00, $AA, $80, $00, $00, $55, $B0, $02, $00, $00, $03, $00, $00, $02, $80, $00, $00, $55, $80, $02, $00, $FF, $A0,
    $05, $00, $00, $03, $00, $00, $02, $80, $00, $00, $55, $80, $00, $00, $55, $80, $02, $00, $00, $03, $00, $00, $04, $80, $00, $00, $00, $B0, $03, $00, $FF, $A0, $04, $00, $00, $04, $00, $00, $02, $80,
    $00, $00, $AA, $80, $00, $00, $AA, $80, $00, $00, $55, $80, $07, $00, $00, $02, $00, $00, $02, $80, $00, $00, $55, $80, $06, $00, $00, $02, $00, $00, $02, $80, $00, $00, $55, $80, $05, $00, $00, $03,
    $00, $00, $02, $80, $00, $00, $55, $80, $01, $00, $00, $A0, $04, $00, $00, $04, $00, $00, $02, $80, $00, $00, $55, $80, $02, $00, $55, $A0, $02, $00, $AA, $A0, $13, $00, $00, $02, $00, $00, $02, $80,
    $00, $00, $55, $80, $04, $00, $00, $04, $00, $00, $02, $80, $00, $00, $55, $80, $03, $00, $00, $A0, $03, $00, $55, $A0, $25, $00, $00, $04, $01, $00, $02, $80, $00, $00, $55, $80, $04, $00, $E4, $A0,
    $05, $00, $E4, $A0, $02, $00, $00, $03, $00, $00, $01, $80, $00, $00, $00, $80, $01, $00, $55, $80, $06, $00, $00, $02, $00, $00, $02, $80, $01, $00, $00, $A0, $04, $00, $00, $04, $00, $00, $03, $80,
    $00, $00, $00, $80, $00, $00, $55, $80, $00, $00, $E4, $B0, $42, $00, $00, $03, $00, $00, $0F, $80, $00, $00, $E4, $80, $00, $08, $E4, $A0, $01, $00, $00, $02, $00, $08, $0F, $80, $00, $00, $E4, $80,
    $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[3] = { program.local[0..1],'#13+
    '		{ 0.12800001, 0.63999999, 0.192, 0.14285715 } };'#13+
    'TEMP R0;'#13+
    'MOV R0.x, c[0];'#13+
    'MAD R0.x, R0, c[2].w, fragment.texcoord[0].y;'#13+
    'ADD R0.x, R0, -c[2].y;'#13+
    'MUL R0.y, R0.x, R0.x;'#13+
    'ADD R0.x, fragment.texcoord[0], -c[2].z;'#13+
    'MAD R0.x, R0, R0, R0.y;'#13+
    'RSQ R0.x, R0.x;'#13+
    'RCP R0.y, R0.x;'#13+
    'ADD R0.w, fragment.texcoord[0].x, c[0].x;'#13+
    'MUL R0.z, R0.y, c[1].x;'#13+
    'ADD R0.x, fragment.texcoord[0].y, -c[2].y;'#13+
    'MUL R0.y, R0.x, R0.x;'#13+
    'ADD R0.x, fragment.texcoord[0], -c[2].y;'#13+
    'MAD R0.y, R0.x, R0.x, R0;'#13+
    'ADD R0.x, fragment.texcoord[0].y, -c[2];'#13+
    'RSQ R0.y, R0.y;'#13+
    'RCP R0.y, R0.y;'#13+
    'MUL R0.y, R0, c[1].x;'#13+
    'SIN R0.y, R0.y;'#13+
    'MUL R0.x, R0, R0;'#13+
    'ADD R0.w, R0, -c[2].x;'#13+
    'MAD R0.x, R0.w, R0.w, R0;'#13+
    'RSQ R0.x, R0.x;'#13+
    'RCP R0.x, R0.x;'#13+
    'MUL R0.x, R0, c[1];'#13+
    'SIN R0.x, R0.x;'#13+
    'ADD R0.x, R0, R0.y;'#13+
    'SIN R0.y, R0.z;'#13+
    'RCP R0.z, c[1].x;'#13+
    'ADD R0.x, R0, R0.y;'#13+
    'MAD R0.xy, R0.x, R0.z, fragment.texcoord[0];'#13+
    'TEX result.color, R0, texture[0], 2D;'#13+
    'END';
  GLSLF: PAnsiChar =
    'float _TMP5;'#13+
    'float _TMP3;'#13+
    'float _TMP1;'#13+
    'float _TMP6;'#13+
    'float _TMP10;'#13+
    'float _a0011;'#13+
    'float _a0013;'#13+
    'float _a0017;'#13+
    'float _TMP18;'#13+
    'float _a0021;'#13+
    'float _a0025;'#13+
    'float _TMP26;'#13+
    'float _b0027;'#13+
    'float _a0029;'#13+
    'float _a0033;'#13+
    'varying vec4 TEX0;'#13+
    'uniform sampler2D texture0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'void main()'#13+
    '{'#13+
    '    vec2 _uv;'#13+
    '    vec4 _Color;'#13+
    '    float _f;'#13+
    '    _a0011 = TEX0.x + PSParam0.x;'#13+
    '    _a0013 = (_a0011 - 1.28000006E-001)*(_a0011 - 1.28000006E-001) + (TEX0.y - 1.28000006E-001)*(TEX0.y - 1.28000006E-001);'#13+
    '    _TMP6 = inversesqrt(_a0013);'#13+
    '    _TMP10 = 1.00000000E+000/_TMP6;'#13+
    '    _a0017 = _TMP10*PSParam1.x;'#13+
    '    _TMP1 = sin(_a0017);'#13+
    '    _a0021 = (TEX0.x - 6.39999986E-001)*(TEX0.x - 6.39999986E-001) + (TEX0.y - 6.39999986E-001)*(TEX0.y - 6.39999986E-001);'#13+
    '    _TMP6 = inversesqrt(_a0021);'#13+
    '    _TMP18 = 1.00000000E+000/_TMP6;'#13+
    '    _a0025 = _TMP18*PSParam1.x;'#13+
    '    _TMP3 = sin(_a0025);'#13+
    '    _b0027 = TEX0.y + PSParam0.x/7.00000000E+000;'#13+
    '    _a0029 = (TEX0.x - 1.92000002E-001)*(TEX0.x - 1.92000002E-001) + (_b0027 - 6.39999986E-001)*(_b0027 - 6.39999986E-001);'#13+
    '    _TMP6 = inversesqrt(_a0029);'#13+
    '    _TMP26 = 1.00000000E+000/_TMP6;'#13+
    '    _a0033 = _TMP26*PSParam1.x;'#13+
    '    _TMP5 = sin(_a0033);'#13+
    '    _f = _TMP1 + _TMP3 + _TMP5;'#13+
    '    _uv.xy = TEX0.xy + _f/PSParam1.x;'#13+
    '    _Color = texture2D(texture0, _uv.xy);'#13+
    '    gl_FragColor = _Color;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[1] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TWaveFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('Wave', 'An effect that applies a wave pattern to the input.', [
    FilterValueRec('Time', 'The moment in time. Animate this value over a long period of time. The speed depends on the size. The larger the size, the larger the increase in time on every frame, thus from 0 to 2048 in a smaller amount of time.', TShaderValueType.vtFloat, 0, 0, 2048),
    FilterValueRec('WaveSize', 'The distance between waves. (the higher the value the closer the waves are to their neighbor).', TShaderValueType.vtFloat, 64, 32, 256)
  ]);
end;

{ TMagnifyFilter }

constructor TMagnifyFilter.Create;
const
  DX9PS2BIN: array [0..543] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $48, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $F7, $00, $00, $00, $00, $02, $FF, $FF, $05, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $F0, $00, $00, $00,
    $80, $00, $00, $00, $02, $00, $03, $00, $01, $00, $0E, $00, $8C, $00, $00, $00, $00, $00, $00, $00, $9C, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $A4, $00, $00, $00, $00, $00, $00, $00,
    $B4, $00, $00, $00, $02, $00, $02, $00, $01, $00, $0A, $00, $8C, $00, $00, $00, $00, $00, $00, $00, $C2, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $8C, $00, $00, $00, $00, $00, $00, $00,
    $C9, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $E0, $00, $00, $00, $00, $00, $00, $00, $41, $73, $70, $65, $63, $74, $52, $61, $74, $69, $6F, $00, $00, $00, $03, $00, $01, $00, $01, $00,
    $01, $00, $00, $00, $00, $00, $00, $00, $43, $65, $6E, $74, $65, $72, $00, $AB, $01, $00, $03, $00, $01, $00, $02, $00, $01, $00, $00, $00, $00, $00, $00, $00, $4D, $61, $67, $6E, $69, $66, $69, $63,
    $61, $74, $69, $6F, $6E, $00, $52, $61, $64, $69, $75, $73, $00, $69, $6D, $70, $6C, $69, $63, $69, $74, $49, $6E, $70, $75, $74, $53, $61, $6D, $70, $6C, $65, $72, $00, $AB, $AB, $04, $00, $0C, $00,
    $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29, $20, $44, $33, $44, $58, $39, $20, $53,
    $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C, $65, $72, $20, $00, $51, $00, $00, $05, $04, $00, $0F, $A0, $00, $00, $80, $3F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90, $00, $08, $0F, $A0, $06, $00, $00, $02, $00, $00, $02, $80, $03, $00, $00, $A0, $01, $00, $00, $02,
    $00, $00, $01, $80, $04, $00, $00, $A0, $02, $00, $00, $03, $01, $00, $03, $80, $00, $00, $E4, $B0, $00, $00, $E4, $A1, $05, $00, $00, $03, $00, $00, $03, $80, $00, $00, $E4, $80, $01, $00, $E4, $80,
    $5A, $00, $00, $04, $00, $00, $01, $80, $00, $00, $E4, $80, $00, $00, $E4, $80, $04, $00, $55, $A0, $07, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $06, $00, $00, $02, $00, $00, $01, $80,
    $00, $00, $00, $80, $02, $00, $00, $03, $00, $00, $01, $80, $00, $00, $00, $80, $01, $00, $00, $A1, $06, $00, $00, $02, $00, $00, $02, $80, $02, $00, $00, $A0, $04, $00, $00, $04, $01, $00, $03, $80,
    $01, $00, $E4, $80, $00, $00, $55, $80, $00, $00, $E4, $A0, $58, $00, $00, $04, $00, $00, $03, $80, $00, $00, $00, $80, $00, $00, $E4, $B0, $01, $00, $E4, $80, $42, $00, $00, $03, $00, $00, $0F, $80,
    $00, $00, $E4, $80, $00, $08, $E4, $A0, $01, $00, $00, $02, $00, $08, $0F, $80, $00, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[5] = { program.local[0..3],'#13+
    '		{ 1 } };'#13+
    'TEMP R0;'#13+
    'ADD R0.zw, fragment.texcoord[0].xyxy, -c[0].xyxy;'#13+
    'RCP R0.y, c[3].x;'#13+
    'MOV R0.x, c[4];'#13+
    'MUL R0.xy, R0.zwzw, R0;'#13+
    'MUL R0.xy, R0, R0;'#13+
    'ADD R0.x, R0, R0.y;'#13+
    'RCP R0.y, c[2].x;'#13+
    'RSQ R0.x, R0.x;'#13+
    'RCP R0.x, R0.x;'#13+
    'MAD R0.zw, R0, R0.y, c[0].xyxy;'#13+
    'ADD R0.x, R0, -c[1];'#13+
    'CMP R0.xy, R0.x, R0.zwzw, fragment.texcoord[0];'#13+
    'TEX result.color, R0, texture[0], 2D;'#13+
    'END';
  GLSLF: PAnsiChar =
    'vec4 _ret_0;'#13+
    'float _TMP0;'#13+
    'float _TMP1;'#13+
    'float _TMP7;'#13+
    'vec2 _v0008;'#13+
    'varying vec4 TEX0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform vec4 PSParam2;'#13+
    'uniform vec4 PSParam3;'#13+
    'uniform sampler2D texture0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec2 _centerToPixel;'#13+
    '    vec2 _samplePoint;'#13+
    '    _centerToPixel = TEX0.xy - PSParam0.xy;'#13+
    '    _v0008 = _centerToPixel/vec2(1.00000000E+000, PSParam3.x);'#13+
    '    _TMP0 = dot(_v0008, _v0008);'#13+
    '    _TMP1 = inversesqrt(_TMP0);'#13+
    '    _TMP7 = 1.00000000E+000/_TMP1;'#13+
    '    _samplePoint = TEX0.xy;'#13+
    '    if (_TMP7 < PSParam1.x) { '#13+
    '        _samplePoint = PSParam0.xy + _centerToPixel/PSParam2.x;'#13+
    '    } // end if'#13+
    '    _ret_0 = texture2D(texture0, _samplePoint);'#13+
    '    gl_FragColor = _ret_0;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[1] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TMagnifyFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('Magnify', 'An effect that magnifies a circular region.', [
    FilterValueRec('Center', 'The center point of the ripples.', TShaderValueType.vtPoint, VarFromPointXY(150, 150), VarFromPointXY(0, 0), VarFromPointXY(65535, 65535)),
    FilterValueRec('Radius', 'The radius of the magnified region.', TShaderValueType.vtFloat, 0.25, 0, 1),
    FilterValueRec('Magnification', 'The magnification factor.', TShaderValueType.vtFloat, 2, 1, 5),
    FilterValueRec('AspectRatio', 'The aspect ratio (width / height) of the input.', TShaderValueType.vtFloat, 1.5, 0.5, 2)
  ]);
end;

{ TWrapFilter }

constructor TWrapFilter.Create;
const
  DX9PS2BIN: array [0..883] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $54, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $27, $01, $00, $00, $00, $02, $FF, $FF, $09, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $20, $01, $00, $00,
    $D0, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $E0, $00, $00, $00, $00, $00, $00, $00, $F0, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $F4, $00, $00, $00, $00, $00, $00, $00,
    $04, $01, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $F4, $00, $00, $00, $00, $00, $00, $00, $08, $01, $00, $00, $02, $00, $02, $00, $01, $00, $0A, $00, $F4, $00, $00, $00, $00, $00, $00, $00,
    $0C, $01, $00, $00, $02, $00, $03, $00, $01, $00, $0E, $00, $F4, $00, $00, $00, $00, $00, $00, $00, $10, $01, $00, $00, $02, $00, $04, $00, $01, $00, $12, $00, $F4, $00, $00, $00, $00, $00, $00, $00,
    $14, $01, $00, $00, $02, $00, $05, $00, $01, $00, $16, $00, $F4, $00, $00, $00, $00, $00, $00, $00, $18, $01, $00, $00, $02, $00, $06, $00, $01, $00, $1A, $00, $F4, $00, $00, $00, $00, $00, $00, $00,
    $1C, $01, $00, $00, $02, $00, $07, $00, $01, $00, $1E, $00, $F4, $00, $00, $00, $00, $00, $00, $00, $69, $6D, $70, $6C, $69, $63, $69, $74, $49, $6E, $70, $75, $74, $00, $AB, $AB, $04, $00, $0C, $00,
    $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $6C, $70, $30, $00, $00, $00, $03, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $6C, $70, $31, $00, $6C, $70, $32, $00,
    $6C, $70, $33, $00, $72, $70, $30, $00, $72, $70, $31, $00, $72, $70, $32, $00, $72, $70, $33, $00, $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29,
    $20, $44, $33, $44, $58, $39, $20, $53, $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C, $65, $72, $20, $00, $51, $00, $00, $05, $08, $00, $0F, $A0, $00, $00, $80, $3F, $00, $00, $40, $40,
    $00, $00, $00, $00, $00, $00, $00, $00, $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90, $00, $08, $0F, $A0, $02, $00, $00, $03, $00, $00, $08, $80,
    $00, $00, $55, $B1, $08, $00, $00, $A0, $05, $00, $00, $03, $00, $00, $01, $80, $00, $00, $FF, $80, $00, $00, $FF, $80, $05, $00, $00, $03, $00, $00, $02, $80, $00, $00, $FF, $80, $00, $00, $00, $80,
    $05, $00, $00, $03, $00, $00, $04, $80, $00, $00, $55, $B0, $08, $00, $55, $A0, $05, $00, $00, $03, $00, $00, $01, $80, $00, $00, $00, $80, $00, $00, $AA, $80, $05, $00, $00, $03, $00, $00, $04, $80,
    $00, $00, $AA, $80, $00, $00, $55, $B0, $05, $00, $00, $03, $01, $00, $08, $80, $00, $00, $00, $80, $01, $00, $00, $A0, $05, $00, $00, $03, $00, $00, $01, $80, $00, $00, $00, $80, $05, $00, $00, $A0,
    $04, $00, $00, $04, $01, $00, $01, $80, $00, $00, $55, $80, $00, $00, $00, $A0, $01, $00, $FF, $80, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $55, $80, $04, $00, $00, $A0, $00, $00, $00, $80,
    $05, $00, $00, $03, $00, $00, $02, $80, $00, $00, $FF, $80, $00, $00, $AA, $80, $04, $00, $00, $04, $00, $00, $04, $80, $00, $00, $55, $80, $02, $00, $00, $A0, $01, $00, $00, $80, $04, $00, $00, $04,
    $00, $00, $01, $80, $00, $00, $55, $80, $06, $00, $00, $A0, $00, $00, $00, $80, $05, $00, $00, $03, $00, $00, $02, $80, $00, $00, $55, $B0, $00, $00, $55, $B0, $05, $00, $00, $03, $00, $00, $02, $80,
    $00, $00, $55, $80, $00, $00, $55, $B0, $04, $00, $00, $04, $00, $00, $04, $80, $00, $00, $55, $80, $03, $00, $00, $A0, $00, $00, $AA, $80, $04, $00, $00, $04, $00, $00, $01, $80, $00, $00, $55, $80,
    $07, $00, $00, $A0, $00, $00, $00, $80, $02, $00, $00, $03, $00, $00, $02, $80, $00, $00, $AA, $81, $00, $00, $00, $80, $02, $00, $00, $03, $00, $00, $04, $80, $00, $00, $AA, $81, $00, $00, $00, $B0,
    $02, $00, $00, $03, $00, $00, $01, $80, $00, $00, $00, $80, $00, $00, $00, $B1, $06, $00, $00, $02, $00, $00, $02, $80, $00, $00, $55, $80, $05, $00, $00, $03, $01, $00, $01, $80, $00, $00, $AA, $80,
    $00, $00, $55, $80, $58, $00, $00, $04, $00, $00, $02, $80, $00, $00, $AA, $80, $08, $00, $00, $A0, $08, $00, $AA, $A0, $01, $00, $00, $02, $01, $00, $02, $80, $00, $00, $55, $B0, $42, $00, $00, $03,
    $01, $00, $0F, $80, $01, $00, $E4, $80, $00, $08, $E4, $A0, $58, $00, $00, $04, $00, $00, $01, $80, $00, $00, $00, $80, $08, $00, $00, $A0, $08, $00, $AA, $A0, $05, $00, $00, $03, $00, $00, $01, $80,
    $00, $00, $55, $80, $00, $00, $00, $80, $58, $00, $00, $04, $00, $00, $0F, $80, $00, $00, $00, $81, $08, $00, $AA, $A0, $01, $00, $E4, $80, $01, $00, $00, $02, $00, $08, $0F, $80, $00, $00, $E4, $80,
    $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[9] = { program.local[0..7],'#13+
    '		{ 3, 1, 0 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'ADD R0.y, -fragment.texcoord[0], c[8];'#13+
    'MUL R0.z, R0.y, R0.y;'#13+
    'MUL R0.w, fragment.texcoord[0].y, R0.z;'#13+
    'MUL R1.x, R0.w, c[1];'#13+
    'MUL R0.x, fragment.texcoord[0].y, c[8];'#13+
    'MUL R0.x, fragment.texcoord[0].y, R0;'#13+
    'MUL R0.x, R0, R0.y;'#13+
    'MUL R0.y, R0, R0.z;'#13+
    'MUL R0.z, R1.x, c[8].x;'#13+
    'MAD R0.z, R0.y, c[0].x, R0;'#13+
    'MUL R0.w, R0, c[5].x;'#13+
    'MUL R0.w, R0, c[8].x;'#13+
    'MAD R0.w, R0.y, c[4].x, R0;'#13+
    'MAD R0.z, R0.x, c[2].x, R0;'#13+
    'MUL R0.y, fragment.texcoord[0], fragment.texcoord[0];'#13+
    'MAD R0.w, R0.x, c[6].x, R0;'#13+
    'MUL R0.x, fragment.texcoord[0].y, R0.y;'#13+
    'MAD R0.w, R0.x, c[7].x, R0;'#13+
    'MAD R0.x, R0, c[3], R0.z;'#13+
    'SGE R0.z, R0.w, fragment.texcoord[0].x;'#13+
    'SGE R0.y, fragment.texcoord[0].x, R0.x;'#13+
    'MUL R0.y, R0, R0.z;'#13+
    'ADD R0.z, -R0.x, R0.w;'#13+
    'ABS R1.x, R0.y;'#13+
    'RCP R0.z, R0.z;'#13+
    'ADD R0.x, fragment.texcoord[0], -R0;'#13+
    'MOV R0.y, fragment.texcoord[0];'#13+
    'MUL R0.x, R0, R0.z;'#13+
    'TEX R0, R0, texture[0], 2D;'#13+
    'CMP R1.x, -R1, c[8].z, c[8].y;'#13+
    'CMP result.color, -R1.x, c[8].z, R0;'#13+
    'END';
  GLSLF: PAnsiChar =
    'vec4 _ret_0;'#13+
    'float _TMP0;'#13+
    'float _b00011;'#13+
    'float _b10011;'#13+
    'float _b20011;'#13+
    'float _b30011;'#13+
    'float _b00013;'#13+
    'float _b10013;'#13+
    'float _b20013;'#13+
    'float _b30013;'#13+
    'float _t0015;'#13+
    'varying vec4 TEX0;'#13+
    'uniform sampler2D texture0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform vec4 PSParam2;'#13+
    'uniform vec4 PSParam3;'#13+
    'uniform vec4 PSParam4;'#13+
    'uniform vec4 PSParam5;'#13+
    'uniform vec4 PSParam6;'#13+
    'uniform vec4 PSParam7;'#13+
    'void main()'#13+
    '{'#13+
    '    float _left;'#13+
    '    float _right;'#13+
    '    vec2 _pos1;'#13+
    '    _b00011 = (1.00000000E+000 - TEX0.y)*(1.00000000E+000 - TEX0.y)*(1.00000000E+000 - TEX0.y);'#13+
    '    _TMP0 = (1.00000000E+000 - TEX0.y)*(1.00000000E+000 - TEX0.y);'#13+
    '    _b10011 = 3.00000000E+000*TEX0.y*_TMP0;'#13+
    '    _b20011 = 3.00000000E+000*TEX0.y*TEX0.y*(1.00000000E+000 - TEX0.y);'#13+
    '    _b30011 = TEX0.y*TEX0.y*TEX0.y;'#13+
    '    _left = _b00011*PSParam0.x + _b10011*PSParam1.x + _b20011*PSParam2.x + _b30011*PSParam3.x;'#13+
    '    _b00013 = (1.00000000E+000 - TEX0.y)*(1.00000000E+000 - TEX0.y)*(1.00000000E+000 - TEX0.y);'#13+
    '    _TMP0 = (1.00000000E+000 - TEX0.y)*(1.00000000E+000 - TEX0.y);'#13+
    '    _b10013 = 3.00000000E+000*TEX0.y*_TMP0;'#13+
    '    _b20013 = 3.00000000E+000*TEX0.y*TEX0.y*(1.00000000E+000 - TEX0.y);'#13+
    '    _b30013 = TEX0.y*TEX0.y*TEX0.y;'#13+
    '    _right = _b00013*PSParam4.x + _b10013*PSParam5.x + _b20013*PSParam6.x + _b30013*PSParam7.x;'#13+
    '    if (TEX0.x >= _left && TEX0.x <= _right) { '#13+
    '        _t0015 = (TEX0.x - _left)/(_right - _left);'#13+
    '        _pos1 = vec2(_t0015, TEX0.y);'#13+
    '        _ret_0 = texture2D(texture0, _pos1);'#13+
    '        gl_FragColor = _ret_0;'#13+
    '        return;'#13+
    '    } else {'#13+
    '        gl_FragColor = vec4( 0.0, 0.0, 0.0, 0.0);'#13+
    '        return;'#13+
    '    } // end if'#13+
    '    gl_FragColor = _ret_0;'#13+
    '} ';
begin
  inherited;
  FAntiAlise := True;
  FShaders[1] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TWrapFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('Wrap', 'Wrap image by two Bezier curves.', [
    FilterValueRec('LeftStart', 'Left wrap curve start point', TShaderValueType.vtFloat, 0, 0, 1),
    FilterValueRec('LeftControl1', 'Left wrap curve control point 1', TShaderValueType.vtFloat, 0.25, 0, 1),
    FilterValueRec('LeftControl2', 'Left wrap curve control point 2', TShaderValueType.vtFloat, 0.25, 0, 1),
    FilterValueRec('LeftEnd', 'Left wrap curve end point', TShaderValueType.vtFloat, 0, 0, 1),
    FilterValueRec('RightStart', 'Right wrap curve start point', TShaderValueType.vtFloat, 1, 0, 1),
    FilterValueRec('RightControl1', 'Right wrap curve control point 1', TShaderValueType.vtFloat, 0.75, 0, 1),
    FilterValueRec('RightControl2', 'Right wrap curve control point 2', TShaderValueType.vtFloat, 0.75, 0, 1),
    FilterValueRec('RightEnd', 'Right wrap curve end point', TShaderValueType.vtFloat, 1, 0, 1)
  ]);
end;

{ TSmoothMagnifyFilter }

constructor TSmoothMagnifyFilter.Create;
const
  DX9PS2BIN: array [0..703] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $51, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $1B, $01, $00, $00, $00, $02, $FF, $FF, $06, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $14, $01, $00, $00,
    $94, $00, $00, $00, $02, $00, $04, $00, $01, $00, $12, $00, $A0, $00, $00, $00, $00, $00, $00, $00, $B0, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $B8, $00, $00, $00, $00, $00, $00, $00,
    $C8, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $A0, $00, $00, $00, $00, $00, $00, $00, $D4, $00, $00, $00, $02, $00, $03, $00, $01, $00, $0E, $00, $A0, $00, $00, $00, $00, $00, $00, $00,
    $E2, $00, $00, $00, $02, $00, $02, $00, $01, $00, $0A, $00, $A0, $00, $00, $00, $00, $00, $00, $00, $EE, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $04, $01, $00, $00, $00, $00, $00, $00,
    $41, $73, $70, $65, $63, $74, $52, $61, $74, $69, $6F, $00, $00, $00, $03, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $43, $65, $6E, $74, $65, $72, $00, $AB, $01, $00, $03, $00,
    $01, $00, $02, $00, $01, $00, $00, $00, $00, $00, $00, $00, $49, $6E, $6E, $65, $72, $52, $61, $64, $69, $75, $73, $00, $4D, $61, $67, $6E, $69, $66, $69, $63, $61, $74, $69, $6F, $6E, $00, $4F, $75,
    $74, $65, $72, $52, $61, $64, $69, $75, $73, $00, $69, $6D, $70, $6C, $69, $63, $69, $74, $49, $6E, $70, $75, $74, $53, $61, $6D, $70, $6C, $65, $72, $00, $AB, $04, $00, $0C, $00, $01, $00, $01, $00,
    $01, $00, $00, $00, $00, $00, $00, $00, $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29, $20, $44, $33, $44, $58, $39, $20, $53, $68, $61, $64, $65,
    $72, $20, $43, $6F, $6D, $70, $69, $6C, $65, $72, $20, $00, $51, $00, $00, $05, $05, $00, $0F, $A0, $00, $00, $80, $3F, $00, $00, $00, $00, $00, $00, $00, $C0, $00, $00, $40, $40, $1F, $00, $00, $02,
    $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90, $00, $08, $0F, $A0, $06, $00, $00, $02, $00, $00, $02, $80, $04, $00, $00, $A0, $01, $00, $00, $02, $00, $00, $01, $80,
    $05, $00, $00, $A0, $02, $00, $00, $03, $01, $00, $03, $80, $00, $00, $E4, $B0, $00, $00, $E4, $A1, $05, $00, $00, $03, $00, $00, $03, $80, $00, $00, $E4, $80, $01, $00, $E4, $80, $5A, $00, $00, $04,
    $00, $00, $01, $80, $00, $00, $E4, $80, $00, $00, $E4, $80, $05, $00, $55, $A0, $07, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80, $06, $00, $00, $02, $00, $00, $01, $80, $00, $00, $00, $80,
    $02, $00, $00, $03, $00, $00, $01, $80, $00, $00, $00, $80, $01, $00, $00, $A1, $01, $00, $00, $02, $02, $00, $08, $80, $01, $00, $00, $A0, $0B, $00, $00, $03, $00, $00, $02, $80, $02, $00, $FF, $80,
    $02, $00, $00, $A0, $02, $00, $00, $03, $00, $00, $02, $80, $00, $00, $55, $80, $01, $00, $00, $A1, $06, $00, $00, $02, $00, $00, $02, $80, $00, $00, $55, $80, $05, $00, $00, $03, $00, $00, $11, $80,
    $00, $00, $00, $80, $00, $00, $55, $80, $04, $00, $00, $04, $00, $00, $02, $80, $00, $00, $00, $80, $05, $00, $AA, $A0, $05, $00, $FF, $A0, $05, $00, $00, $03, $00, $00, $01, $80, $00, $00, $00, $80,
    $00, $00, $00, $80, $05, $00, $00, $03, $00, $00, $01, $80, $00, $00, $55, $80, $00, $00, $00, $80, $06, $00, $00, $02, $00, $00, $02, $80, $03, $00, $00, $A0, $04, $00, $00, $04, $01, $00, $03, $80,
    $01, $00, $E4, $80, $00, $00, $55, $80, $00, $00, $E4, $A0, $12, $00, $00, $04, $02, $00, $03, $80, $00, $00, $00, $80, $00, $00, $E4, $B0, $01, $00, $E4, $80, $42, $00, $00, $03, $00, $00, $0F, $80,
    $02, $00, $E4, $80, $00, $08, $E4, $A0, $01, $00, $00, $02, $00, $08, $0F, $80, $00, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[6] = { program.local[0..4],'#13+
    '		{ 1, 2, 3 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'ADD R0.xy, fragment.texcoord[0], -c[0];'#13+
    'MOV R1.x, c[2];'#13+
    'RCP R0.w, c[4].x;'#13+
    'MOV R0.z, c[5].x;'#13+
    'MUL R0.zw, R0.xyxy, R0;'#13+
    'MUL R0.zw, R0, R0;'#13+
    'ADD R0.z, R0, R0.w;'#13+
    'MAX R0.w, R1.x, c[1].x;'#13+
    'RCP R1.x, c[3].x;'#13+
    'MAD R0.xy, R0, R1.x, c[0];'#13+
    'RSQ R0.z, R0.z;'#13+
    'ADD R0.w, R0, -c[1].x;'#13+
    'RCP R0.z, R0.z;'#13+
    'ADD R0.z, R0, -c[1].x;'#13+
    'RCP R0.w, R0.w;'#13+
    'MUL_SAT R0.w, R0.z, R0;'#13+
    'MUL R0.z, R0.w, R0.w;'#13+
    'MAD R0.w, -R0, c[5].y, c[5].z;'#13+
    'ADD R1.xy, fragment.texcoord[0], -R0;'#13+
    'MUL R0.z, R0, R0.w;'#13+
    'MAD R0.xy, R0.z, R1, R0;'#13+
    'TEX result.color, R0, texture[0], 2D;'#13+
    'END';
  GLSLF: PAnsiChar =
    'vec4 _ret_0;'#13+
    'float _TMP0;'#13+
    'float _TMP3;'#13+
    'float _TMP1;'#13+
    'float _TMP2;'#13+
    'float _TMP10;'#13+
    'vec2 _v0011;'#13+
    'float _x0023;'#13+
    'float _TMP24;'#13+
    'vec2 _a0031;'#13+
    'varying vec4 TEX0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform vec4 PSParam2;'#13+
    'uniform vec4 PSParam3;'#13+
    'uniform vec4 PSParam4;'#13+
    'uniform sampler2D texture0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec2 _centerToPixel;'#13+
    '    float _ratio;'#13+
    '    vec2 _samplePoint;'#13+
    '    _centerToPixel = TEX0.xy - PSParam0.xy;'#13+
    '    _v0011 = _centerToPixel/vec2(1.00000000E+000, PSParam4.x);'#13+
    '    _TMP1 = dot(_v0011, _v0011);'#13+
    '    _TMP2 = inversesqrt(_TMP1);'#13+
    '    _TMP10 = 1.00000000E+000/_TMP2;'#13+
    '    _TMP0 = max(PSParam1.x, PSParam2.x);'#13+
    '    _x0023 = (_TMP10 - PSParam1.x)/(_TMP0 - PSParam1.x);'#13+
    '    _TMP3 = min(1.00000000E+000, _x0023);'#13+
    '    _TMP24 = max(0.0, _TMP3);'#13+
    '    _ratio = _TMP24*_TMP24*(3.00000000E+000 - 2.00000000E+000*_TMP24);'#13+
    '    _a0031 = PSParam0.xy + _centerToPixel/PSParam3.x;'#13+
    '    _samplePoint = _a0031 + _ratio*(TEX0.xy - _a0031);'#13+
    '    _ret_0 = texture2D(texture0, _samplePoint);'#13+
    '    gl_FragColor = _ret_0;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[1] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TSmoothMagnifyFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('SmoothMagnify', 'An effect that magnifies a circular region.', [
    FilterValueRec('Center', 'The center point of the ripples.', TShaderValueType.vtPoint, VarFromPointXY(150, 150), VarFromPointXY(0, 0), VarFromPointXY(65535, 65535)),
    FilterValueRec('InnerRadius', 'The inner radius of the magnified region.', TShaderValueType.vtFloat, 0.2, 0, 1),
    FilterValueRec('OuterRadius', 'The outer radius of the magnified region.', TShaderValueType.vtFloat, 0.4, 0, 1),
    FilterValueRec('Magnification', 'The magnification factor.', TShaderValueType.vtFloat, 2, 1, 5),
    FilterValueRec('AspectRatio', 'The aspect ratio (width / height) of the input.', TShaderValueType.vtFloat, 1.5, 0.5, 2)
  ]);
end;

initialization
  RegisterFilter('Distortion', TRippleFilter);
  RegisterFilter('Distortion', TSwirlFilter);
  RegisterFilter('Distortion', TMagnifyFilter);
  RegisterFilter('Distortion', TSmoothMagnifyFilter);
  RegisterFilter('Distortion', TBandsFilter);
  RegisterFilter('Distortion', TWaveFilter);
  RegisterFilter('Distortion', TWrapFilter);
  RegisterFilter('Distortion', TBandedSwirlFilter);
  RegisterFilter('Distortion', TPinchFilter);
end.

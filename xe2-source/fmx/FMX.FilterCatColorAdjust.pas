{*******************************************************}
{                                                       }
{              Delphi FireMonkey Platform               }
{                                                       }
{ Copyright(c) 2011 Embarcadero Technologies, Inc.      }
{                                                       }
{*******************************************************}

unit FMX.FilterCatColorAdjust;

interface

{$I FMX.Defines.inc}

uses
  FMX.Filter;

type

  THueAdjustFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TContrastFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TBloomFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

  TGloomFilter = class(TShaderFilter)
  protected
    class function FilterAttr: TFilterRec; override;
  public
    constructor Create; override;
  end;

implementation

{ THueAdjustFilter }

constructor THueAdjustFilter.Create;
const
  DX9PS2BIN: array [0..1207] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $28, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $77, $00, $00, $00, $00, $02, $FF, $FF, $02, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $70, $00, $00, $00,
    $44, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $48, $00, $00, $00, $00, $00, $00, $00, $58, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $60, $00, $00, $00, $00, $00, $00, $00,
    $48, $75, $65, $00, $00, $00, $03, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $69, $6E, $70, $75, $74, $00, $AB, $AB, $04, $00, $0C, $00, $01, $00, $01, $00, $01, $00, $00, $00,
    $00, $00, $00, $00, $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29, $20, $44, $33, $44, $58, $39, $20, $53, $68, $61, $64, $65, $72, $20, $43, $6F,
    $6D, $70, $69, $6C, $65, $72, $20, $00, $51, $00, $00, $05, $01, $00, $0F, $A0, $00, $00, $40, $40, $00, $00, $C0, $40, $AB, $AA, $AA, $3E, $AB, $AA, $2A, $3F, $51, $00, $00, $05, $02, $00, $0F, $A0,
    $00, $00, $00, $00, $00, $00, $00, $3F, $00, $00, $80, $3F, $00, $00, $80, $BF, $51, $00, $00, $05, $03, $00, $0F, $A0, $00, $00, $00, $C0, $00, $00, $80, $C0, $00, $00, $00, $00, $00, $00, $00, $00,
    $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90, $00, $08, $0F, $A0, $42, $00, $00, $03, $00, $00, $0F, $80, $00, $00, $E4, $B0, $00, $08, $E4, $A0,
    $0A, $00, $00, $03, $01, $00, $08, $80, $00, $00, $55, $80, $00, $00, $00, $80, $0A, $00, $00, $03, $02, $00, $08, $80, $00, $00, $AA, $80, $01, $00, $FF, $80, $0B, $00, $00, $03, $01, $00, $01, $80,
    $00, $00, $00, $80, $00, $00, $55, $80, $0B, $00, $00, $03, $02, $00, $01, $80, $01, $00, $00, $80, $00, $00, $AA, $80, $02, $00, $00, $03, $02, $00, $08, $80, $02, $00, $FF, $81, $02, $00, $00, $80,
    $02, $00, $00, $03, $01, $00, $07, $80, $00, $00, $E4, $81, $02, $00, $00, $80, $04, $00, $00, $04, $01, $00, $07, $80, $02, $00, $FF, $80, $01, $00, $00, $A0, $01, $00, $E4, $80, $05, $00, $00, $03,
    $01, $00, $08, $80, $02, $00, $FF, $80, $01, $00, $55, $A0, $06, $00, $00, $02, $01, $00, $08, $80, $01, $00, $FF, $80, $04, $00, $00, $04, $03, $00, $08, $80, $01, $00, $00, $80, $01, $00, $FF, $80,
    $01, $00, $AA, $A0, $04, $00, $00, $04, $03, $00, $01, $80, $01, $00, $AA, $80, $01, $00, $FF, $81, $03, $00, $FF, $80, $04, $00, $00, $04, $03, $00, $02, $80, $01, $00, $55, $80, $01, $00, $FF, $80,
    $01, $00, $FF, $A0, $04, $00, $00, $04, $01, $00, $01, $80, $01, $00, $00, $80, $01, $00, $FF, $81, $03, $00, $55, $80, $02, $00, $00, $03, $03, $00, $02, $80, $00, $00, $55, $80, $02, $00, $00, $81,
    $05, $00, $00, $03, $03, $00, $02, $80, $03, $00, $55, $80, $03, $00, $55, $80, $58, $00, $00, $04, $01, $00, $01, $80, $03, $00, $55, $81, $03, $00, $00, $80, $01, $00, $00, $80, $05, $00, $00, $03,
    $01, $00, $02, $80, $01, $00, $55, $80, $01, $00, $FF, $80, $04, $00, $00, $04, $01, $00, $02, $80, $01, $00, $AA, $80, $01, $00, $FF, $80, $01, $00, $55, $81, $02, $00, $00, $03, $01, $00, $04, $80,
    $00, $00, $00, $80, $02, $00, $00, $81, $05, $00, $00, $03, $01, $00, $04, $80, $01, $00, $AA, $80, $01, $00, $AA, $80, $58, $00, $00, $04, $01, $00, $01, $80, $01, $00, $AA, $81, $01, $00, $55, $80,
    $01, $00, $00, $80, $06, $00, $00, $02, $01, $00, $04, $80, $02, $00, $00, $80, $05, $00, $00, $03, $01, $00, $02, $80, $02, $00, $FF, $80, $01, $00, $AA, $80, $05, $00, $00, $03, $02, $00, $08, $80,
    $02, $00, $FF, $80, $02, $00, $FF, $80, $58, $00, $00, $04, $01, $00, $03, $80, $02, $00, $FF, $81, $02, $00, $00, $A0, $01, $00, $E4, $80, $02, $00, $00, $03, $02, $00, $08, $80, $01, $00, $55, $81,
    $02, $00, $AA, $A0, $05, $00, $00, $03, $02, $00, $04, $80, $02, $00, $00, $80, $02, $00, $FF, $80, $01, $00, $00, $02, $03, $00, $02, $80, $02, $00, $00, $80, $01, $00, $00, $02, $03, $00, $04, $80,
    $02, $00, $AA, $80, $01, $00, $00, $02, $02, $00, $08, $80, $02, $00, $55, $A0, $04, $00, $00, $04, $02, $00, $08, $80, $00, $00, $00, $A0, $02, $00, $FF, $80, $01, $00, $00, $80, $05, $00, $00, $03,
    $03, $00, $08, $80, $02, $00, $FF, $80, $01, $00, $55, $A0, $13, $00, $00, $02, $01, $00, $01, $80, $03, $00, $FF, $80, $02, $00, $00, $03, $03, $00, $08, $80, $03, $00, $FF, $80, $01, $00, $00, $81,
    $04, $00, $00, $04, $02, $00, $08, $80, $02, $00, $FF, $80, $01, $00, $55, $A0, $03, $00, $FF, $81, $02, $00, $00, $03, $01, $00, $01, $80, $02, $00, $FF, $81, $02, $00, $AA, $A0, $04, $00, $00, $04,
    $02, $00, $08, $80, $01, $00, $55, $80, $02, $00, $FF, $81, $02, $00, $AA, $A0, $04, $00, $00, $04, $01, $00, $01, $80, $01, $00, $55, $80, $01, $00, $00, $81, $02, $00, $AA, $A0, $05, $00, $00, $03,
    $02, $00, $02, $80, $02, $00, $00, $80, $01, $00, $00, $80, $05, $00, $00, $03, $03, $00, $01, $80, $02, $00, $00, $80, $02, $00, $FF, $80, $02, $00, $00, $03, $02, $00, $08, $80, $03, $00, $FF, $80,
    $03, $00, $55, $A0, $05, $00, $00, $03, $02, $00, $08, $80, $02, $00, $FF, $80, $02, $00, $FF, $80, $58, $00, $00, $04, $01, $00, $07, $80, $02, $00, $FF, $81, $02, $00, $C9, $80, $03, $00, $C9, $80,
    $02, $00, $00, $03, $01, $00, $08, $80, $03, $00, $FF, $80, $01, $00, $00, $A1, $05, $00, $00, $03, $01, $00, $08, $80, $01, $00, $FF, $80, $01, $00, $FF, $80, $58, $00, $00, $04, $01, $00, $07, $80,
    $01, $00, $FF, $81, $03, $00, $D2, $80, $01, $00, $E4, $80, $02, $00, $00, $03, $01, $00, $08, $80, $03, $00, $FF, $80, $03, $00, $00, $A0, $05, $00, $00, $03, $01, $00, $08, $80, $01, $00, $FF, $80,
    $01, $00, $FF, $80, $58, $00, $00, $04, $01, $00, $07, $80, $01, $00, $FF, $81, $02, $00, $D2, $80, $01, $00, $E4, $80, $02, $00, $00, $03, $01, $00, $08, $80, $03, $00, $FF, $80, $02, $00, $FF, $A0,
    $05, $00, $00, $03, $02, $00, $08, $80, $03, $00, $FF, $80, $03, $00, $FF, $80, $05, $00, $00, $03, $01, $00, $08, $80, $01, $00, $FF, $80, $01, $00, $FF, $80, $58, $00, $00, $04, $01, $00, $07, $80,
    $01, $00, $FF, $81, $03, $00, $E4, $80, $01, $00, $E4, $80, $58, $00, $00, $04, $00, $00, $07, $80, $02, $00, $FF, $81, $02, $00, $E4, $80, $01, $00, $E4, $80, $01, $00, $00, $02, $00, $08, $0F, $80,
    $00, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[4] = { program.local[0],'#13+
    '		{ 1, 0, 0.66666669, 3 },'#13+
    '		{ 6, 0.33333334, 0.5, 2 },'#13+
    '		{ 4 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'TEMP R2;'#13+
    'TEMP R3;'#13+
    'TEX R0, fragment.texcoord[0], texture[0], 2D;'#13+
    'MIN R1.y, R0.x, R0;'#13+
    'MAX R1.x, R0, R0.y;'#13+
    'MAX R1.x, R1, R0.z;'#13+
    'MIN R1.y, R0.z, R1;'#13+
    'ADD R1.y, R1.x, -R1;'#13+
    'ADD R3.xyz, -R1.x, R0;'#13+
    'MUL R1.z, R1.y, c[2].x;'#13+
    'RCP R0.x, R1.z;'#13+
    'MAD R2.xyz, R1.y, c[1].w, -R3;'#13+
    'MUL R2.xyz, R2, R0.x;'#13+
    'ADD R0.x, R2, -R2.z;'#13+
    'ADD R0.z, R0.x, c[2].y;'#13+
    'ABS R0.x, R1.y;'#13+
    'ADD R2.w, R2.z, -R2.y;'#13+
    'ABS R1.z, R3.x;'#13+
    'CMP R2.z, -R1, c[1].y, c[1].x;'#13+
    'CMP R1.w, -R0.x, c[1].x, c[1].y;'#13+
    'MUL R1.z, R1.w, R2;'#13+
    'CMP R1.z, -R1, R2.w, c[1].y;'#13+
    'ADD R2.w, -R1.x, R0.y;'#13+
    'ABS R0.y, R2.z;'#13+
    'ABS R2.z, R2.w;'#13+
    'CMP R0.y, -R0, c[1], c[1].x;'#13+
    'CMP R2.z, -R2, c[1].y, c[1].x;'#13+
    'MUL R0.y, R1.w, R0;'#13+
    'MUL R1.w, R0.y, R2.z;'#13+
    'CMP R1.w, -R1, R0.z, R1.z;'#13+
    'ADD R1.z, R2.y, -R2.x;'#13+
    'ABS R0.z, R2;'#13+
    'CMP R0.z, -R0, c[1].y, c[1].x;'#13+
    'MUL R0.y, R0, R0.z;'#13+
    'ADD R1.z, R1, c[1];'#13+
    'CMP R0.z, -R0.y, R1, R1.w;'#13+
    'MOV R0.y, c[2].z;'#13+
    'MAD R0.y, R0, c[0].x, R0.z;'#13+
    'MUL R0.z, R0.y, c[2].x;'#13+
    'FLR R1.z, R0;'#13+
    'ADD R1.w, R1.z, -c[1].x;'#13+
    'ABS R2.x, R1.w;'#13+
    'CMP R3.y, -R2.x, c[1], c[1].x;'#13+
    'ABS R0.y, R1.z;'#13+
    'CMP R0.y, -R0, c[1], c[1].x;'#13+
    'ABS R0.y, R0;'#13+
    'CMP R1.w, -R0.y, c[1].y, c[1].x;'#13+
    'RCP R0.y, R1.x;'#13+
    'MUL R0.y, R1, R0;'#13+
    'CMP R0.x, -R0, R0.y, c[1].y;'#13+
    'ADD R0.z, -R1, R0;'#13+
    'MAD R0.y, -R0.x, R0.z, c[1].x;'#13+
    'MUL R2.w, R1.x, R0.y;'#13+
    'ADD R0.z, -R0, c[1].x;'#13+
    'MAD R0.y, -R0.x, R0.z, c[1].x;'#13+
    'MUL R1.y, R1.x, R0;'#13+
    'ADD R0.x, -R0, c[1];'#13+
    'MUL R3.x, R1, R0;'#13+
    'MUL R2.z, R1.w, R3.y;'#13+
    'MOV R0.y, R1;'#13+
    'MOV R0.z, R3.x;'#13+
    'MOV R0.x, R1;'#13+
    'MOV R2.y, R3.x;'#13+
    'MOV R2.x, R1;'#13+
    'CMP R2.xyz, -R2.z, R2.wxyw, R0;'#13+
    'ADD R0.y, R1.z, -c[2].w;'#13+
    'ABS R0.x, R3.y;'#13+
    'ABS R0.y, R0;'#13+
    'CMP R3.y, -R0, c[1], c[1].x;'#13+
    'CMP R0.x, -R0, c[1].y, c[1];'#13+
    'MUL R1.w, R1, R0.x;'#13+
    'MUL R3.z, R1.w, R3.y;'#13+
    'MOV R0.z, R1.y;'#13+
    'MOV R0.x, R3;'#13+
    'MOV R0.y, R1.x;'#13+
    'CMP R0.xyz, -R3.z, R0, R2;'#13+
    'ADD R2.y, R1.z, -c[1].w;'#13+
    'ABS R2.x, R3.y;'#13+
    'ABS R2.z, R2.y;'#13+
    'CMP R2.y, -R2.x, c[1], c[1].x;'#13+
    'MUL R1.w, R1, R2.y;'#13+
    'CMP R2.x, -R2.z, c[1].y, c[1];'#13+
    'MUL R2.y, R1.w, R2.x;'#13+
    'MOV R3.y, R2.w;'#13+
    'MOV R3.z, R1.x;'#13+
    'CMP R0.xyz, -R2.y, R3, R0;'#13+
    'ADD R2.y, R1.z, -c[3].x;'#13+
    'ABS R1.z, R2.x;'#13+
    'ABS R2.x, R2.y;'#13+
    'CMP R2.y, -R2.x, c[1], c[1].x;'#13+
    'CMP R1.z, -R1, c[1].y, c[1].x;'#13+
    'MUL R2.x, R1.w, R1.z;'#13+
    'ABS R1.z, R2.y;'#13+
    'MUL R2.z, R2.x, R2.y;'#13+
    'CMP R2.y, -R1.z, c[1], c[1].x;'#13+
    'MOV R1.z, R3.x;'#13+
    'MOV R1.w, R1.x;'#13+
    'CMP R0.xyz, -R2.z, R1.yzww, R0;'#13+
    'MUL R1.w, R2.x, R2.y;'#13+
    'MOV R1.z, R2.w;'#13+
    'MOV R1.y, R3.x;'#13+
    'CMP result.color.xyz, -R1.w, R1, R0;'#13+
    'MOV result.color.w, R0;'#13+
    'END';
  GLSLF: PAnsiChar =
    'float _TMP1;'#13+
    'float _TMP0;'#13+
    'float _minChannel0007;'#13+
    'float _maxChannel0007;'#13+
    'vec3 _HSV0007;'#13+
    'float _delta0007;'#13+
    'vec3 _delRGB10007;'#13+
    'vec3 _RGB0017;'#13+
    'float _var_h0017;'#13+
    'float _var_i0017;'#13+
    'float _var_10017;'#13+
    'float _var_20017;'#13+
    'float _var_30017;'#13+
    'varying vec4 TEX0;'#13+
    'uniform sampler2D texture0;'#13+
    'uniform vec4 PSParam0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec4 _Color;'#13+
    '    vec3 _hsv;'#13+
    '    _Color = texture2D(texture0, TEX0.xy);'#13+
    '    _TMP0 = min(_Color.x, _Color.y);'#13+
    '    _minChannel0007 = min(_TMP0, _Color.z);'#13+
    '    _TMP1 = max(_Color.x, _Color.y);'#13+
    '    _maxChannel0007 = max(_TMP1, _Color.z);'#13+
    '    _HSV0007.xy = vec2( 0.0, 0.0);'#13+
    '    _HSV0007.z = _maxChannel0007;'#13+
    '    _delta0007 = _maxChannel0007 - _minChannel0007;'#13+
    '    if (_delta0007 != 0.0) { '#13+
    '        _HSV0007.y = _delta0007/_maxChannel0007;'#13+
    '        _delRGB10007 = ((_HSV0007.zzz - _Color.xyz) + 3.00000000E+000*_delta0007)/(6.00000000E+000*_delta0007);'#13+
    '        if (_Color.x == _maxChannel0007) { '#13+
    '            _HSV0007.x = _delRGB10007.z - _delRGB10007.y;'#13+
    '        } else {'#13+
    '            if (_Color.y == _maxChannel0007) { '#13+
    '                _HSV0007.x = (3.33333343E-001 + _delRGB10007.x) - _delRGB10007.z;'#13+
    '            } else {'#13+
    '                _HSV0007.x = (6.66666687E-001 + _delRGB10007.y) - _delRGB10007.x;'#13+
    '            } // end if'#13+
    '        } // end if'#13+
    '    } // end if'#13+
    '    _hsv.x = _HSV0007.x + PSParam0.x*5.00000000E-001;'#13+
    '    _var_h0017 = _hsv.x*6.00000000E+000;'#13+
    '    _var_i0017 = floor(_var_h0017);'#13+
    '    _var_10017 = _maxChannel0007*(1.00000000E+000 - _HSV0007.y);'#13+
    '    _var_20017 = _maxChannel0007*(1.00000000E+000 - _HSV0007.y*(_var_h0017 - _var_i0017));'#13+
    '    _var_30017 = _maxChannel0007*(1.00000000E+000 - _HSV0007.y*(1.00000000E+000 - (_var_h0017 - _var_i0017)));'#13+
    '    if (_var_i0017 == 0.0) { '#13+
    '        _RGB0017 = vec3(_maxChannel0007, _var_30017, _var_10017);'#13+
    '    } else {'#13+
    '        if (_var_i0017 == 1.00000000E+000) { '#13+
    '            _RGB0017 = vec3(_var_20017, _maxChannel0007, _var_10017);'#13+
    '        } else {'#13+
    '            if (_var_i0017 == 2.00000000E+000) { '#13+
    '                _RGB0017 = vec3(_var_10017, _maxChannel0007, _var_30017);'#13+
    '            } else {'#13+
    '                if (_var_i0017 == 3.00000000E+000) { '#13+
    '                    _RGB0017 = vec3(_var_10017, _var_20017, _maxChannel0007);'#13+
    '                } else {'#13+
    '                    if (_var_i0017 == 4.00000000E+000) { '#13+
    '                        _RGB0017 = vec3(_var_30017, _var_10017, _maxChannel0007);'#13+
    '                    } else {'#13+
    '                        _RGB0017 = vec3(_maxChannel0007, _var_10017, _var_20017);'#13+
    '                    } // end if'#13+
    '                } // end if'#13+
    '            } // end if'#13+
    '        } // end if'#13+
    '    } // end if'#13+
    '    _Color.xyz = _RGB0017;'#13+
    '    gl_FragColor = _Color;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[FPassCount] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function THueAdjustFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('HueAdjust', 'Changes the overall hue, or tint, of the source pixels.', [
    FilterValueRec('Hue', 'The hue offset.', TShaderValueType.vtFloat, 0, -1, 1)
  ]);
end;

{ TContrastFilter }

constructor TContrastFilter.Create;
const
  DX9PS2BIN: array [0..411] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $35, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $AB, $00, $00, $00, $00, $02, $FF, $FF, $03, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $A4, $00, $00, $00,
    $58, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $64, $00, $00, $00, $00, $00, $00, $00, $74, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $64, $00, $00, $00, $00, $00, $00, $00,
    $7D, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $94, $00, $00, $00, $00, $00, $00, $00, $42, $72, $69, $67, $68, $74, $6E, $65, $73, $73, $00, $AB, $00, $00, $03, $00, $01, $00, $01, $00,
    $01, $00, $00, $00, $00, $00, $00, $00, $43, $6F, $6E, $74, $72, $61, $73, $74, $00, $69, $6D, $70, $6C, $69, $63, $69, $74, $49, $6E, $70, $75, $74, $53, $61, $6D, $70, $6C, $65, $72, $00, $AB, $AB,
    $04, $00, $0C, $00, $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29, $20, $44, $33, $44,
    $58, $39, $20, $53, $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C, $65, $72, $20, $00, $51, $00, $00, $05, $02, $00, $0F, $A0, $00, $00, $00, $BF, $00, $00, $00, $00, $00, $00, $00, $3F,
    $00, $00, $00, $00, $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02, $00, $00, $00, $90, $00, $08, $0F, $A0, $42, $00, $00, $03, $00, $00, $0F, $80, $00, $00, $E4, $B0,
    $00, $08, $E4, $A0, $01, $00, $00, $02, $01, $00, $08, $80, $02, $00, $55, $A0, $0B, $00, $00, $03, $02, $00, $08, $80, $01, $00, $00, $A0, $01, $00, $FF, $80, $06, $00, $00, $02, $01, $00, $01, $80,
    $00, $00, $FF, $80, $04, $00, $00, $04, $01, $00, $07, $80, $00, $00, $E4, $80, $01, $00, $00, $80, $02, $00, $00, $A0, $04, $00, $00, $04, $01, $00, $07, $80, $01, $00, $E4, $80, $02, $00, $FF, $80,
    $00, $00, $00, $A0, $02, $00, $00, $03, $01, $00, $07, $80, $01, $00, $E4, $80, $02, $00, $AA, $A0, $05, $00, $00, $03, $00, $00, $07, $80, $00, $00, $FF, $80, $01, $00, $E4, $80, $01, $00, $00, $02,
    $00, $08, $0F, $80, $00, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[3] = { program.local[0..1],'#13+
    '		{ 0.5, 0 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'TEX R0, fragment.texcoord[0], texture[0], 2D;'#13+
    'MOV R1.x, c[2].y;'#13+
    'RCP R1.y, R0.w;'#13+
    'MAX R1.x, R1, c[1];'#13+
    'MAD R0.xyz, R0, R1.y, -c[2].x;'#13+
    'MAD R0.xyz, R0, R1.x, c[0].x;'#13+
    'ADD R0.xyz, R0, c[2].x;'#13+
    'MUL result.color.xyz, R0, R0.w;'#13+
    'MOV result.color.w, R0;'#13+
    'END';
  GLSLF: PAnsiChar =
    'float _TMP0;'#13+
    'varying vec4 TEX0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform sampler2D texture0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec4 _pixelColor;'#13+
    '    _pixelColor = texture2D(texture0, TEX0.xy);'#13+
    '    _pixelColor.xyz = _pixelColor.xyz/_pixelColor.www;'#13+
    '    _TMP0 = max(PSParam1.x, 0.0);'#13+
    '    _pixelColor.xyz = (_pixelColor.xyz - 5.00000000E-001)*_TMP0 + 5.00000000E-001;'#13+
    '    _pixelColor.xyz = _pixelColor.xyz + vec3(PSParam0.x, PSParam0.x, PSParam0.x);'#13+
    '    _pixelColor.xyz = _pixelColor.xyz*_pixelColor.www;'#13+
    '    gl_FragColor = _pixelColor;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[FPassCount] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TContrastFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('Contrast', 'An effect that controls brightness and contrast.', [
    FilterValueRec('Brightness', 'The brightness offset.', TShaderValueType.vtFloat, 0, -1, 1),
    FilterValueRec('Contrast', 'The contrast multiplier.', TShaderValueType.vtFloat, 1.5, 0, 2)
  ]);
end;

{ TBloomFilter }

constructor TBloomFilter.Create;
const
  DX9PS2BIN: array [0..651] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $48, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $F7, $00, $00, $00, $00, $02, $FF, $FF, $05, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $F0, $00, $00, $00,
    $80, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $90, $00, $00, $00, $00, $00, $00, $00, $A0, $00, $00, $00, $02, $00, $03, $00, $01, $00, $0E, $00, $90, $00, $00, $00, $00, $00, $00, $00,
    $AF, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $90, $00, $00, $00, $00, $00, $00, $00, $BE, $00, $00, $00, $02, $00, $02, $00, $01, $00, $0A, $00, $90, $00, $00, $00, $00, $00, $00, $00,
    $CE, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $E0, $00, $00, $00, $00, $00, $00, $00, $42, $61, $73, $65, $49, $6E, $74, $65, $6E, $73, $69, $74, $79, $00, $AB, $AB, $00, $00, $03, $00,
    $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $42, $61, $73, $65, $53, $61, $74, $75, $72, $61, $74, $69, $6F, $6E, $00, $42, $6C, $6F, $6F, $6D, $49, $6E, $74, $65, $6E, $73, $69, $74,
    $79, $00, $42, $6C, $6F, $6F, $6D, $53, $61, $74, $75, $72, $61, $74, $69, $6F, $6E, $00, $54, $65, $78, $74, $75, $72, $65, $31, $53, $61, $6D, $70, $6C, $65, $72, $00, $AB, $AB, $04, $00, $0C, $00,
    $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29, $20, $44, $33, $44, $58, $39, $20, $53,
    $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C, $65, $72, $20, $00, $51, $00, $00, $05, $04, $00, $0F, $A0, $00, $00, $80, $BE, $AB, $AA, $AA, $3F, $00, $00, $80, $3F, $00, $00, $00, $00,
    $51, $00, $00, $05, $05, $00, $0F, $A0, $9A, $99, $99, $3E, $3D, $0A, $17, $3F, $AE, $47, $E1, $3D, $00, $00, $00, $00, $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02,
    $00, $00, $00, $90, $00, $08, $0F, $A0, $42, $00, $00, $03, $00, $00, $0F, $80, $00, $00, $E4, $B0, $00, $08, $E4, $A0, $06, $00, $00, $02, $01, $00, $08, $80, $00, $00, $FF, $80, $05, $00, $00, $03,
    $01, $00, $07, $80, $00, $00, $E4, $80, $01, $00, $FF, $80, $08, $00, $00, $03, $01, $00, $01, $80, $01, $00, $E4, $80, $05, $00, $E4, $A0, $04, $00, $00, $04, $02, $00, $07, $80, $00, $00, $E4, $80,
    $01, $00, $FF, $80, $01, $00, $00, $81, $04, $00, $00, $04, $01, $00, $07, $80, $03, $00, $00, $A0, $02, $00, $E4, $80, $01, $00, $00, $80, $04, $00, $00, $04, $02, $00, $07, $80, $00, $00, $E4, $80,
    $01, $00, $FF, $80, $04, $00, $00, $A0, $05, $00, $00, $03, $01, $00, $07, $80, $01, $00, $E4, $80, $01, $00, $00, $A0, $05, $00, $00, $03, $02, $00, $17, $80, $02, $00, $E4, $80, $04, $00, $55, $A0,
    $08, $00, $00, $03, $01, $00, $08, $80, $02, $00, $E4, $80, $05, $00, $E4, $A0, $12, $00, $00, $04, $03, $00, $07, $80, $02, $00, $00, $A0, $02, $00, $E4, $80, $01, $00, $FF, $80, $05, $00, $00, $03,
    $02, $00, $07, $80, $03, $00, $E4, $80, $00, $00, $00, $A0, $01, $00, $00, $02, $03, $00, $17, $80, $02, $00, $E4, $80, $02, $00, $00, $03, $03, $00, $07, $80, $03, $00, $E4, $81, $04, $00, $AA, $A0,
    $04, $00, $00, $04, $01, $00, $07, $80, $01, $00, $E4, $80, $03, $00, $E4, $80, $02, $00, $E4, $80, $05, $00, $00, $03, $00, $00, $07, $80, $00, $00, $FF, $80, $01, $00, $E4, $80, $01, $00, $00, $02,
    $00, $08, $0F, $80, $00, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[6] = { program.local[0..3],'#13+
    '		{ 1.3333334, 0.30000001, 0.58999997, 0.11 },'#13+
    '		{ 1, 0.25 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'TEX R0, fragment.texcoord[0], texture[0], 2D;'#13+
    'RCP R1.x, R0.w;'#13+
    'MUL R0.xyz, R0, R1.x;'#13+
    'ADD R1.xyz, R0, -c[5].y;'#13+
    'DP3 R0.z, R0, c[4].yzww;'#13+
    'MUL_SAT R1.xyz, R1, c[4].x;'#13+
    'DP3 R1.y, R1, c[4].yzww;'#13+
    'ADD R0.x, R0, -R0.z;'#13+
    'MAD R0.x, R0, c[3], R0.z;'#13+
    'ADD R1.x, R1, -R1.y;'#13+
    'MAD R1.x, R1, c[2], R1.y;'#13+
    'MUL R0.y, R1.x, c[0].x;'#13+
    'MOV_SAT R1.x, R0.y;'#13+
    'ADD R0.z, -R1.x, c[5].x;'#13+
    'MUL R0.x, R0, c[1];'#13+
    'MAD R0.x, R0, R0.z, R0.y;'#13+
    'MUL result.color.xyz, R0.x, R0.w;'#13+
    'MOV result.color.w, R0;'#13+
    'END';
  GLSLF: PAnsiChar =
    'vec4 _ret_0;'#13+
    'vec3 _TMP4;'#13+
    'float _TMP3;'#13+
    'vec3 _x0014;'#13+
    'vec3 _TMP15;'#13+
    'float _grey0022;'#13+
    'float _grey0028;'#13+
    'vec3 _TMP35;'#13+
    'varying vec4 TEX0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform vec4 PSParam2;'#13+
    'uniform vec4 PSParam3;'#13+
    'uniform sampler2D texture0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec4 _color1;'#13+
    '    vec3 _base;'#13+
    '    vec3 _bloom;'#13+
    '    vec3 _TMP10;'#13+
    '    _color1 = texture2D(texture0, TEX0.xy);'#13+
    '    _base = _color1.xyz/_color1.w;'#13+
    '    _x0014 = (_base - 2.50000000E-001)/7.50000000E-001;'#13+
    '    _TMP4 = min(vec3( 1.00000000E+000, 1.00000000E+000, 1.00000000E+000), _x0014);'#13+
    '    _TMP15 = max(vec3( 0.0, 0.0, 0.0), _TMP4);'#13+
    '    _grey0022 = dot(_TMP15, vec3( 3.00000012E-001, 5.89999974E-001, 1.09999999E-001));'#13+
    '    _TMP3 = _grey0022 + PSParam2.x*(_TMP15.x - _grey0022);'#13+
    '    _bloom = vec3(_TMP3, _TMP3, _TMP3)*PSParam0.x;'#13+
    '    _grey0028 = dot(_base, vec3( 3.00000012E-001, 5.89999974E-001, 1.09999999E-001));'#13+
    '    _TMP3 = _grey0028 + PSParam3.x*(_base.x - _grey0028);'#13+
    '    _base = vec3(_TMP3, _TMP3, _TMP3)*PSParam1.x;'#13+
    '    _TMP4 = min(vec3( 1.00000000E+000, 1.00000000E+000, 1.00000000E+000), _bloom);'#13+
    '    _TMP35 = max(vec3( 0.0, 0.0, 0.0), _TMP4);'#13+
    '    _base = _base*(1.00000000E+000 - _TMP35);'#13+
    '    _TMP10 = (_base + _bloom)*_color1.w;'#13+
    '    _ret_0 = vec4(_TMP10.x, _TMP10.y, _TMP10.z, _color1.w);'#13+
    '    gl_FragColor = _ret_0;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[FPassCount] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TBloomFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('Bloom', 'An effect that intensifies bright regions.', [
    FilterValueRec('BloomIntensity', 'Intensity of the bloom image.', TShaderValueType.vtFloat, 1, 0, 1),
    FilterValueRec('BaseIntensity', 'Intensity of the base image.', TShaderValueType.vtFloat, 0.5, 0, 1),
    FilterValueRec('BloomSaturation', 'Saturation of the bloom image.', TShaderValueType.vtFloat, 1, 0, 1),
    FilterValueRec('BaseSaturation', 'Saturation of the base image.', TShaderValueType.vtFloat, 0.5, 0, 1)
  ]);
end;

{ TGloomFilter }

constructor TGloomFilter.Create;
const
  DX9PS2BIN: array [0..651] of byte = (
    $00, $02, $FF, $FF, $FE, $FF, $48, $00, $43, $54, $41, $42, $1C, $00, $00, $00, $F7, $00, $00, $00, $00, $02, $FF, $FF, $05, $00, $00, $00, $1C, $00, $00, $00, $00, $01, $00, $20, $F0, $00, $00, $00,
    $80, $00, $00, $00, $02, $00, $01, $00, $01, $00, $06, $00, $90, $00, $00, $00, $00, $00, $00, $00, $A0, $00, $00, $00, $02, $00, $03, $00, $01, $00, $0E, $00, $90, $00, $00, $00, $00, $00, $00, $00,
    $AF, $00, $00, $00, $02, $00, $00, $00, $01, $00, $02, $00, $90, $00, $00, $00, $00, $00, $00, $00, $BE, $00, $00, $00, $02, $00, $02, $00, $01, $00, $0A, $00, $90, $00, $00, $00, $00, $00, $00, $00,
    $CE, $00, $00, $00, $03, $00, $00, $00, $01, $00, $02, $00, $E0, $00, $00, $00, $00, $00, $00, $00, $42, $61, $73, $65, $49, $6E, $74, $65, $6E, $73, $69, $74, $79, $00, $AB, $AB, $00, $00, $03, $00,
    $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $42, $61, $73, $65, $53, $61, $74, $75, $72, $61, $74, $69, $6F, $6E, $00, $47, $6C, $6F, $6F, $6D, $49, $6E, $74, $65, $6E, $73, $69, $74,
    $79, $00, $47, $6C, $6F, $6F, $6D, $53, $61, $74, $75, $72, $61, $74, $69, $6F, $6E, $00, $54, $65, $78, $74, $75, $72, $65, $31, $53, $61, $6D, $70, $6C, $65, $72, $00, $AB, $AB, $04, $00, $0C, $00,
    $01, $00, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $70, $73, $5F, $32, $5F, $30, $00, $4D, $69, $63, $72, $6F, $73, $6F, $66, $74, $20, $28, $52, $29, $20, $44, $33, $44, $58, $39, $20, $53,
    $68, $61, $64, $65, $72, $20, $43, $6F, $6D, $70, $69, $6C, $65, $72, $20, $00, $51, $00, $00, $05, $04, $00, $0F, $A0, $00, $00, $80, $3F, $00, $00, $40, $3F, $AB, $AA, $AA, $3F, $00, $00, $00, $00,
    $51, $00, $00, $05, $05, $00, $0F, $A0, $9A, $99, $99, $3E, $3D, $0A, $17, $3F, $AE, $47, $E1, $3D, $00, $00, $00, $00, $1F, $00, $00, $02, $00, $00, $00, $80, $00, $00, $03, $B0, $1F, $00, $00, $02,
    $00, $00, $00, $90, $00, $08, $0F, $A0, $42, $00, $00, $03, $00, $00, $0F, $80, $00, $00, $E4, $B0, $00, $08, $E4, $A0, $06, $00, $00, $02, $01, $00, $08, $80, $00, $00, $FF, $80, $04, $00, $00, $04,
    $01, $00, $07, $80, $00, $00, $E4, $80, $01, $00, $FF, $81, $04, $00, $55, $A0, $04, $00, $00, $04, $02, $00, $07, $80, $00, $00, $E4, $80, $01, $00, $FF, $81, $04, $00, $00, $A0, $05, $00, $00, $03,
    $01, $00, $17, $80, $01, $00, $E4, $80, $04, $00, $AA, $A0, $08, $00, $00, $03, $01, $00, $08, $80, $01, $00, $E4, $80, $05, $00, $E4, $A0, $12, $00, $00, $04, $03, $00, $07, $80, $02, $00, $00, $A0,
    $01, $00, $E4, $80, $01, $00, $FF, $80, $05, $00, $00, $03, $01, $00, $07, $80, $03, $00, $E4, $80, $00, $00, $00, $A0, $01, $00, $00, $02, $03, $00, $17, $80, $01, $00, $E4, $80, $02, $00, $00, $03,
    $03, $00, $07, $80, $03, $00, $E4, $81, $04, $00, $00, $A0, $08, $00, $00, $03, $01, $00, $08, $80, $02, $00, $E4, $80, $05, $00, $E4, $A0, $12, $00, $00, $04, $04, $00, $07, $80, $03, $00, $00, $A0,
    $02, $00, $E4, $80, $01, $00, $FF, $80, $05, $00, $00, $03, $02, $00, $07, $80, $04, $00, $E4, $80, $01, $00, $00, $A0, $04, $00, $00, $04, $01, $00, $07, $80, $02, $00, $E4, $80, $03, $00, $E4, $80,
    $01, $00, $E4, $80, $02, $00, $00, $03, $01, $00, $07, $80, $01, $00, $E4, $81, $04, $00, $00, $A0, $05, $00, $00, $03, $00, $00, $07, $80, $00, $00, $FF, $80, $01, $00, $E4, $80, $01, $00, $00, $02,
    $00, $08, $0F, $80, $00, $00, $E4, $80, $FF, $FF, $00, $00
  );
  ARBFP1: PAnsiChar =
    '!!ARBfp1.0'#13+
    'PARAM c[6] = { program.local[0..3],'#13+
    '		{ 1, 0.30000001, 0.58999997, 0.11 },'#13+
    '		{ 0.25, 1.3333334 } };'#13+
    'TEMP R0;'#13+
    'TEMP R1;'#13+
    'TEX R0, fragment.texcoord[0], texture[0], 2D;'#13+
    'RCP R1.x, R0.w;'#13+
    'MAD R0.xyz, -R0, R1.x, c[4].x;'#13+
    'ADD R1.xyz, R0, -c[5].x;'#13+
    'DP3 R0.z, R0, c[4].yzww;'#13+
    'MUL_SAT R1.xyz, R1, c[5].y;'#13+
    'DP3 R1.y, R1, c[4].yzww;'#13+
    'ADD R0.x, R0, -R0.z;'#13+
    'MAD R0.x, R0, c[3], R0.z;'#13+
    'ADD R1.x, R1, -R1.y;'#13+
    'MAD R1.x, R1, c[2], R1.y;'#13+
    'MUL R0.y, R1.x, c[0].x;'#13+
    'MOV_SAT R1.x, R0.y;'#13+
    'ADD R0.z, -R1.x, c[4].x;'#13+
    'MUL R0.x, R0, c[1];'#13+
    'MAD R0.x, R0, R0.z, R0.y;'#13+
    'ADD R0.x, -R0, c[4];'#13+
    'MUL result.color.xyz, R0.x, R0.w;'#13+
    'MOV result.color.w, R0;'#13+
    'END';
  GLSLF: PAnsiChar =
    'vec4 _ret_0;'#13+
    'vec3 _TMP4;'#13+
    'float _TMP3;'#13+
    'vec3 _x0014;'#13+
    'vec3 _TMP15;'#13+
    'float _grey0022;'#13+
    'float _grey0028;'#13+
    'vec3 _TMP35;'#13+
    'varying vec4 TEX0;'#13+
    'uniform vec4 PSParam0;'#13+
    'uniform vec4 PSParam1;'#13+
    'uniform vec4 PSParam2;'#13+
    'uniform vec4 PSParam3;'#13+
    'uniform sampler2D texture0;'#13+
    'void main()'#13+
    '{'#13+
    '    vec4 _color1;'#13+
    '    vec3 _base;'#13+
    '    vec3 _gloom;'#13+
    '    vec3 _TMP10;'#13+
    '    _color1 = texture2D(texture0, TEX0.xy);'#13+
    '    _base = 1.00000000E+000 - _color1.xyz/_color1.w;'#13+
    '    _x0014 = (_base - 2.50000000E-001)/7.50000000E-001;'#13+
    '    _TMP4 = min(vec3( 1.00000000E+000, 1.00000000E+000, 1.00000000E+000), _x0014);'#13+
    '    _TMP15 = max(vec3( 0.0, 0.0, 0.0), _TMP4);'#13+
    '    _grey0022 = dot(_TMP15, vec3( 3.00000012E-001, 5.89999974E-001, 1.09999999E-001));'#13+
    '    _TMP3 = _grey0022 + PSParam2.x*(_TMP15.x - _grey0022);'#13+
    '    _gloom = vec3(_TMP3, _TMP3, _TMP3)*PSParam0.x;'#13+
    '    _grey0028 = dot(_base, vec3( 3.00000012E-001, 5.89999974E-001, 1.09999999E-001));'#13+
    '    _TMP3 = _grey0028 + PSParam3.x*(_base.x - _grey0028);'#13+
    '    _base = vec3(_TMP3, _TMP3, _TMP3)*PSParam1.x;'#13+
    '    _TMP4 = min(vec3( 1.00000000E+000, 1.00000000E+000, 1.00000000E+000), _gloom);'#13+
    '    _TMP35 = max(vec3( 0.0, 0.0, 0.0), _TMP4);'#13+
    '    _base = _base*(1.00000000E+000 - _TMP35);'#13+
    '    _TMP10 = (1.00000000E+000 - (_base + _gloom))*_color1.w;'#13+
    '    _ret_0 = vec4(_TMP10.x, _TMP10.y, _TMP10.z, _color1.w);'#13+
    '    gl_FragColor = _ret_0;'#13+
    '    return;'#13+
    '} ';
begin
  inherited;
  FShaders[FPassCount] := ShaderDevice.CreatePixelShader(@DX9PS2BIN, ARBFP1, GLSLF);
end;

class function TGloomFilter.FilterAttr: TFilterRec;
begin
  Result := FilterRec('Gloom', 'An effect that intensifies dark regions.', [
    FilterValueRec('GloomIntensity', 'Intensity of the gloom image.', TShaderValueType.vtFloat, 1, 0, 1),
    FilterValueRec('BaseIntensity', 'Intensity of the base image.', TShaderValueType.vtFloat, 0.5, 0, 1),
    FilterValueRec('GloomSaturation', 'Saturation of the gloom image.', TShaderValueType.vtFloat, 1, 0, 1),
    FilterValueRec('BaseSaturation', 'Saturation of the base image.', TShaderValueType.vtFloat, 0.5, 0, 1)
  ]);
end;

initialization
  RegisterFilter('Color Adjust', THueAdjustFilter);
  RegisterFilter('Color Adjust', TContrastFilter);
  RegisterFilter('Color Adjust', TBloomFilter);
  RegisterFilter('Color Adjust', TGloomFilter);
end.

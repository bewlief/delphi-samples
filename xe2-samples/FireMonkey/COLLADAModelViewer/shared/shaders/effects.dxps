sampler2D duffuseMap : register(s0);
sampler2D normalMap : register(s1);
sampler2D ambientMap : register(s2);
uniform float4 uSunPosition;
uniform float4 uAmbientColor;
uniform float4 uSunColor;

struct VS_OUT
{
  float4 pos     : POSITION;
  float4 col     : COLOR;
  float2 tex     : TEXCOORD0;
  float3 eyeVector : TEXCOORD1;
  float3 lightVector : TEXCOORD2;
  float3 position     : TEXCOORD3;
  float3x3 tangentSpace : TEXCOORD4;
};

float4 main(VS_OUT IN) : COLOR
{
  float attenuation = max(1.0 - length(uSunPosition.xyz-IN.position.xyz) * uSunPosition.w, 0);

  float4 diffuse = tex2D(duffuseMap, IN.tex);
  if (diffuse.w < 0.001)
    discard;
  diffuse.rgb = float3(1.0,1.0,1.0);

  float4 specular = tex2D(normalMap, IN.tex);
  float4 ambient = tex2D(ambientMap, IN.tex);
  float3 normal = (specular.rgb - 0.5) * 2.0;
  normal = normalize(mul(IN.tangentSpace, normal));

  float3 r = normalize(2 * dot(IN.lightVector, normal) * normal - IN.lightVector);
  float3 v = normalize(IN.eyeVector);
  float dotSpecular = dot(r, v);
  dotSpecular = pow(max(dotSpecular, 0), 2) * (specular.w * attenuation);

  float dotLight = dot(normal, normalize(IN.lightVector));
  float3 lightColor = uSunColor.rgb * (clamp(dotLight, 0.0, 1.0) * attenuation);

  float3 resDiff = min(uAmbientColor.rgb + ambient.rgb + lightColor.rgb,1.0);

  return
    float4(diffuse.rgb * resDiff , diffuse.w) +
    float4(dotSpecular, dotSpecular, dotSpecular, diffuse.w);

}

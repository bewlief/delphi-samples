uniform float4x4 uCameraMatrix;
uniform float4x4 uTransformation;
uniform float4 uSunPosition;
uniform float4 uEyePosition;


struct VS_IN{
  float3 pos: POSITION;
  float3 nor: NORMAL;
  float2 tex: TEXCOORD;
  float4 tan: SPECULAR;
};

struct VS_OUT
{
  float4 pos     : POSITION;
  float4 col     : COLOR;
  float2 tex     : TEXCOORD0;
  float3 eyeVector : TEXCOORD1;
  float3 lightVector : TEXCOORD2;
  float3 position     : TEXCOORD3;
  float3x3 tangentSpace : TEXCOORD4;
};

VS_OUT main(VS_IN IN)
{
  VS_OUT res = (VS_OUT)0;

  res.position = mul(float4(IN.pos, 1.0), uTransformation);

  res.pos = mul(float4(res.position.xyz, 1.0), uCameraMatrix);
  res.tex = IN.tex;

  float4 tangent = (IN.tan * 2.0) - 1.0;

  float3 lNormal = mul(IN.nor, uTransformation);
  float3 lTangent = mul(tangent.rgb, uTransformation);

  float3 n = lNormal;
  float3 t = lTangent;
  float3 b = cross(t.rgb, n.rgb);
  res.tangentSpace = float3x3(t.x, b.x, n.x,
    	                      t.y, b.y, n.y,
    	                      t.z, b.z, n.z);

  res.lightVector =  uSunPosition.xyz - res.position;
  res.eyeVector = uEyePosition.xyz - res.position;

  return res;
}
